// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv_2d_cl_me_ap_fixed_ap_fixed_16_14_5_3_0_config2_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        data_V_V_dout,
        data_V_V_empty_n,
        data_V_V_read,
        res_V_V_TDATA,
        res_V_V_TVALID,
        res_V_V_TREADY,
        weights_V_address0,
        weights_V_ce0,
        weights_V_q0
);

parameter    ap_ST_fsm_state1 = 33'd1;
parameter    ap_ST_fsm_state2 = 33'd2;
parameter    ap_ST_fsm_state3 = 33'd4;
parameter    ap_ST_fsm_state4 = 33'd8;
parameter    ap_ST_fsm_state5 = 33'd16;
parameter    ap_ST_fsm_state6 = 33'd32;
parameter    ap_ST_fsm_state7 = 33'd64;
parameter    ap_ST_fsm_state8 = 33'd128;
parameter    ap_ST_fsm_state9 = 33'd256;
parameter    ap_ST_fsm_state10 = 33'd512;
parameter    ap_ST_fsm_state11 = 33'd1024;
parameter    ap_ST_fsm_state12 = 33'd2048;
parameter    ap_ST_fsm_state13 = 33'd4096;
parameter    ap_ST_fsm_state14 = 33'd8192;
parameter    ap_ST_fsm_state15 = 33'd16384;
parameter    ap_ST_fsm_state16 = 33'd32768;
parameter    ap_ST_fsm_pp0_stage0 = 33'd65536;
parameter    ap_ST_fsm_pp0_stage1 = 33'd131072;
parameter    ap_ST_fsm_pp0_stage2 = 33'd262144;
parameter    ap_ST_fsm_pp0_stage3 = 33'd524288;
parameter    ap_ST_fsm_pp0_stage4 = 33'd1048576;
parameter    ap_ST_fsm_pp0_stage5 = 33'd2097152;
parameter    ap_ST_fsm_pp0_stage6 = 33'd4194304;
parameter    ap_ST_fsm_pp0_stage7 = 33'd8388608;
parameter    ap_ST_fsm_state27 = 33'd16777216;
parameter    ap_ST_fsm_state28 = 33'd33554432;
parameter    ap_ST_fsm_state29 = 33'd67108864;
parameter    ap_ST_fsm_state30 = 33'd134217728;
parameter    ap_ST_fsm_state31 = 33'd268435456;
parameter    ap_ST_fsm_state32 = 33'd536870912;
parameter    ap_ST_fsm_state33 = 33'd1073741824;
parameter    ap_ST_fsm_state34 = 33'd2147483648;
parameter    ap_ST_fsm_state35 = 33'd4294967296;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] data_V_V_dout;
input   data_V_V_empty_n;
output   data_V_V_read;
output  [15:0] res_V_V_TDATA;
output   res_V_V_TVALID;
input   res_V_V_TREADY;
output  [6:0] weights_V_address0;
output   weights_V_ce0;
input  [127:0] weights_V_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_V_V_read;
reg weights_V_ce0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [32:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [3:0] layer_in_V_address0;
reg    layer_in_V_ce0;
reg    layer_in_V_we0;
wire   [127:0] layer_in_V_q0;
reg    layer_in_V_ce1;
reg    layer_in_V_we1;
wire   [127:0] layer_in_V_q1;
reg   [31:0] sX;
reg   [31:0] sY;
reg   [31:0] pY;
reg   [31:0] pX;
reg    data_V_V_blk_n;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln157_fu_437_p2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
reg    res_V_V_TDATA_blk_n;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state35;
reg   [0:0] and_ln166_2_reg_1026;
reg   [127:0] layer_out_i_1_reg_230;
reg   [6:0] i_in_0_i_i_reg_242;
reg   [14:0] phi_mul_reg_253;
reg   [6:0] phi_urem_reg_265;
reg   [15:0] reg_402;
wire    ap_CS_fsm_pp0_stage2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state19_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
reg   [0:0] icmp_ln291_reg_1030;
reg   [15:0] reg_407;
reg   [15:0] reg_412;
reg   [15:0] reg_417;
reg   [15:0] reg_422;
reg   [15:0] reg_427;
reg   [15:0] reg_432;
wire   [4:0] i_fu_443_p2;
reg   [4:0] i_reg_944;
wire    regslice_both_res_V_V_U_apdone_blk;
reg    ap_block_state2;
reg   [15:0] tmp_V_reg_949;
reg   [15:0] tmp_V_8_reg_954;
reg   [15:0] tmp_V_9_reg_959;
reg   [15:0] tmp_V_10_reg_964;
reg   [15:0] tmp_V_11_reg_969;
reg   [15:0] tmp_V_12_reg_974;
reg   [15:0] tmp_V_13_reg_979;
reg   [15:0] tmp_V_14_reg_984;
wire    ap_CS_fsm_state10;
reg   [31:0] sX_load_reg_994;
wire    ap_CS_fsm_state16;
wire   [0:0] icmp_ln166_fu_466_p2;
reg   [0:0] icmp_ln166_reg_999;
reg   [31:0] sY_load_reg_1004;
wire   [0:0] icmp_ln166_1_fu_476_p2;
reg   [0:0] icmp_ln166_1_reg_1009;
reg   [31:0] pY_load_reg_1014;
reg   [31:0] pX_load_reg_1020;
wire   [0:0] and_ln166_2_fu_534_p2;
wire   [0:0] icmp_ln291_fu_540_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state17_pp0_stage0_iter0;
wire    ap_block_state25_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln291_reg_1030_pp0_iter1_reg;
wire   [6:0] i_in_fu_546_p2;
reg   [6:0] i_in_reg_1034;
wire   [6:0] add_ln291_1_fu_552_p2;
reg   [6:0] add_ln291_1_reg_1039;
reg   [2:0] tmp_18_reg_1050;
wire   [7:0] sub_ln293_2_fu_657_p2;
reg   [7:0] sub_ln293_2_reg_1060;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state18_pp0_stage1_iter0;
wire    ap_block_state26_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
wire   [127:0] lshr_ln293_fu_667_p2;
reg   [127:0] lshr_ln293_reg_1065;
wire   [15:0] trunc_ln299_fu_673_p1;
reg   [15:0] trunc_ln299_reg_1070;
reg   [15:0] tmp_3_reg_1075;
reg   [15:0] tmp_5_reg_1080;
reg   [15:0] tmp_7_reg_1085;
reg   [15:0] tmp_9_reg_1090;
reg   [15:0] tmp_11_reg_1095;
reg   [15:0] tmp_13_reg_1100;
reg   [15:0] tmp_15_reg_1105;
wire   [15:0] tmpt_V_fu_761_p1;
reg   [15:0] tmpt_V_reg_1110;
wire   [15:0] add_ln703_fu_770_p2;
reg   [15:0] add_ln703_reg_1115;
wire   [15:0] add_ln703_1_fu_776_p2;
reg   [15:0] add_ln703_1_reg_1120;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state20_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_11001;
wire   [15:0] add_ln703_2_fu_782_p2;
reg   [15:0] add_ln703_2_reg_1125;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state21_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_11001;
wire   [15:0] add_ln703_3_fu_788_p2;
reg   [15:0] add_ln703_3_reg_1130;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state22_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_11001;
wire   [15:0] add_ln703_4_fu_794_p2;
reg   [15:0] add_ln703_4_reg_1135;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state23_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_11001;
wire   [6:0] select_ln291_fu_805_p3;
reg   [6:0] select_ln291_reg_1140;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state24_pp0_stage7_iter0;
wire    ap_block_pp0_stage7_11001;
wire   [14:0] add_ln293_fu_812_p2;
reg   [14:0] add_ln293_reg_1145;
wire   [15:0] add_ln703_5_fu_818_p2;
reg   [15:0] add_ln703_5_reg_1150;
wire   [15:0] add_ln703_6_fu_824_p2;
reg   [15:0] add_ln703_6_reg_1155;
wire   [127:0] tmp_17_fu_836_p9;
reg    ap_enable_reg_pp0_iter1;
wire   [15:0] tmp_V_15_fu_849_p1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state17;
wire    ap_block_pp0_stage7_subdone;
wire    ap_block_pp0_stage1_subdone;
wire    grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_ap_start;
wire    grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_ap_done;
wire    grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_ap_idle;
wire    grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_ap_ready;
wire   [127:0] grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_data_V_read;
wire   [3:0] grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_output_V_address0;
wire    grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_output_V_ce0;
wire    grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_output_V_we0;
wire   [127:0] grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_output_V_d0;
wire   [3:0] grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_output_V_address1;
wire    grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_output_V_ce1;
wire    grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_output_V_we1;
wire   [127:0] grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_output_V_d1;
wire    grp_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_325_ap_ready;
reg   [15:0] grp_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_325_a_V;
reg   [15:0] grp_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_325_w_V;
wire   [15:0] grp_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_325_ap_return;
reg   [4:0] i_0_i_reg_219;
reg    ap_block_state1;
reg    ap_block_state35_io;
wire   [127:0] ap_phi_mux_layer_out_i_1_phi_fu_234_p4;
reg   [6:0] ap_phi_mux_i_in_0_i_i_phi_fu_246_p4;
wire    ap_block_pp0_stage0;
reg   [14:0] ap_phi_mux_phi_mul_phi_fu_257_p4;
reg   [6:0] ap_phi_mux_phi_urem_phi_fu_269_p4;
wire   [31:0] select_ln197_fu_921_p3;
reg   [31:0] ap_phi_mux_storemerge_i_phi_fu_279_p4;
wire   [0:0] icmp_ln187_fu_854_p2;
wire   [0:0] icmp_ln191_fu_900_p2;
reg    grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_ap_start_reg;
reg   [32:0] ap_NS_fsm;
wire    ap_NS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage3;
wire    ap_block_pp0_stage4;
wire    ap_block_pp0_stage5;
wire    ap_block_pp0_stage6;
wire    ap_block_pp0_stage7;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln293_fu_558_p1;
wire   [63:0] zext_ln299_fu_573_p1;
wire   [31:0] select_ln202_fu_875_p3;
wire   [31:0] add_ln195_fu_905_p2;
wire   [31:0] add_ln200_fu_859_p2;
reg   [127:0] grp_fu_331_p1;
reg   [127:0] grp_fu_342_p1;
reg   [127:0] grp_fu_352_p1;
reg   [127:0] grp_fu_362_p1;
reg   [127:0] grp_fu_372_p1;
reg   [127:0] grp_fu_382_p1;
reg   [127:0] grp_fu_392_p1;
wire   [30:0] tmp_1_fu_486_p4;
wire   [30:0] tmp_2_fu_506_p4;
wire   [0:0] icmp_ln166_2_fu_496_p2;
wire   [0:0] icmp_ln166_3_fu_516_p2;
wire   [0:0] and_ln166_1_fu_528_p2;
wire   [0:0] and_ln166_fu_522_p2;
wire   [6:0] tmp_19_fu_578_p3;
wire   [6:0] empty_19_fu_585_p2;
wire   [7:0] zext_ln293_1_fu_597_p1;
wire   [7:0] zext_ln293_2_fu_601_p1;
wire   [0:0] icmp_ln293_fu_591_p2;
wire   [7:0] sub_ln293_fu_615_p2;
wire   [7:0] sub_ln293_1_fu_627_p2;
reg   [127:0] tmp_20_fu_605_p4;
wire   [7:0] xor_ln293_fu_621_p2;
wire   [7:0] select_ln293_fu_633_p3;
wire   [7:0] select_ln293_2_fu_649_p3;
wire   [127:0] select_ln293_1_fu_641_p3;
wire   [127:0] zext_ln293_3_fu_663_p1;
wire   [127:0] zext_ln293_4_fu_747_p1;
wire   [127:0] lshr_ln293_1_fu_750_p2;
wire   [127:0] and_ln293_fu_756_p2;
wire   [15:0] trunc_ln1265_fu_766_p1;
wire   [0:0] icmp_ln291_1_fu_800_p2;
wire   [15:0] add_ln703_7_fu_830_p2;
wire   [31:0] add_ln202_fu_870_p2;
wire   [31:0] add_ln197_fu_916_p2;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage6_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg   [15:0] res_V_V_TDATA_int;
reg    res_V_V_TVALID_int;
wire    res_V_V_TREADY_int;
wire    regslice_both_res_V_V_U_vld_out;
reg    ap_condition_621;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 33'd1;
#0 sX = 32'd0;
#0 sY = 32'd0;
#0 pY = 32'd0;
#0 pX = 32'd0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_ap_start_reg = 1'b0;
end

conv_2d_cl_me_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_layrcU #(
    .DataWidth( 128 ),
    .AddressRange( 9 ),
    .AddressWidth( 4 ))
layer_in_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer_in_V_address0),
    .ce0(layer_in_V_ce0),
    .we0(layer_in_V_we0),
    .d0(grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_output_V_d0),
    .q0(layer_in_V_q0),
    .address1(grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_output_V_address1),
    .ce1(layer_in_V_ce1),
    .we1(layer_in_V_we1),
    .d1(grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_output_V_d1),
    .q1(layer_in_V_q1)
);

cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_ap_start),
    .ap_done(grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_ap_done),
    .ap_idle(grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_ap_idle),
    .ap_ready(grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_ap_ready),
    .data_V_read(grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_data_V_read),
    .output_V_address0(grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_output_V_address0),
    .output_V_ce0(grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_output_V_ce0),
    .output_V_we0(grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_output_V_we0),
    .output_V_d0(grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_output_V_d0),
    .output_V_q0(layer_in_V_q0),
    .output_V_address1(grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_output_V_address1),
    .output_V_ce1(grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_output_V_ce1),
    .output_V_we1(grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_output_V_we1),
    .output_V_d1(grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_output_V_d1),
    .output_V_q1(layer_in_V_q1)
);

product_dense_ap_fixed_ap_fixed_ap_fixed_s grp_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_325(
    .ap_ready(grp_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_325_ap_ready),
    .a_V(grp_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_325_a_V),
    .w_V(grp_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_325_w_V),
    .ap_return(grp_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_325_ap_return)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_V_V_TDATA_int),
    .vld_in(res_V_V_TVALID_int),
    .ack_in(res_V_V_TREADY_int),
    .data_out(res_V_V_TDATA),
    .vld_out(regslice_both_res_V_V_U_vld_out),
    .ack_out(res_V_V_TREADY),
    .apdone_blk(regslice_both_res_V_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((regslice_both_res_V_V_U_apdone_blk == 1'b1) | ((icmp_ln157_fu_437_p2 == 1'd0) & (data_V_V_empty_n == 1'b0))) & (icmp_ln157_fu_437_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state17) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state16) & (1'd1 == and_ln166_2_fu_534_p2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage7_subdone) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state16) & (1'd1 == and_ln166_2_fu_534_p2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_NS_fsm_state10) & (1'b1 == ap_CS_fsm_state9))) begin
            grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_ap_start_reg <= 1'b1;
        end else if ((grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_ap_ready == 1'b1)) begin
            grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state35_io) & (1'b1 == ap_CS_fsm_state35))) begin
        i_0_i_reg_219 <= i_reg_944;
    end else if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_i_reg_219 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln291_reg_1030 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_in_0_i_i_reg_242 <= i_in_reg_1034;
    end else if (((1'b1 == ap_CS_fsm_state16) & (1'd1 == and_ln166_2_fu_534_p2))) begin
        i_in_0_i_i_reg_242 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln291_reg_1030_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer_out_i_1_reg_230 <= tmp_17_fu_836_p9;
    end else if (((1'b1 == ap_CS_fsm_state16) & (1'd1 == and_ln166_2_fu_534_p2))) begin
        layer_out_i_1_reg_230 <= 128'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state35_io) & (1'b1 == ap_CS_fsm_state35))) begin
        if ((icmp_ln187_fu_854_p2 == 1'd1)) begin
            pX <= 32'd0;
        end else if ((icmp_ln187_fu_854_p2 == 1'd0)) begin
            pX <= add_ln200_fu_859_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_621)) begin
        if ((icmp_ln191_fu_900_p2 == 1'd1)) begin
            pY <= 32'd0;
        end else if ((icmp_ln191_fu_900_p2 == 1'd0)) begin
            pY <= add_ln195_fu_905_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln291_reg_1030 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        phi_mul_reg_253 <= add_ln293_reg_1145;
    end else if (((1'b1 == ap_CS_fsm_state16) & (1'd1 == and_ln166_2_fu_534_p2))) begin
        phi_mul_reg_253 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln291_reg_1030 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        phi_urem_reg_265 <= select_ln291_reg_1140;
    end else if (((1'b1 == ap_CS_fsm_state16) & (1'd1 == and_ln166_2_fu_534_p2))) begin
        phi_urem_reg_265 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state35_io) & (1'b1 == ap_CS_fsm_state35))) begin
        if ((icmp_ln187_fu_854_p2 == 1'd1)) begin
            sX <= 32'd0;
        end else if ((icmp_ln187_fu_854_p2 == 1'd0)) begin
            sX <= select_ln202_fu_875_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln291_fu_540_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln291_1_reg_1039 <= add_ln291_1_fu_552_p2;
        tmp_18_reg_1050 <= {{ap_phi_mux_phi_mul_phi_fu_257_p4[13:11]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln291_reg_1030 == 1'd0) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln293_reg_1145 <= add_ln293_fu_812_p2;
        select_ln291_reg_1140 <= select_ln291_fu_805_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln291_reg_1030 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        add_ln703_1_reg_1120 <= add_ln703_1_fu_776_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln291_reg_1030 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        add_ln703_2_reg_1125 <= add_ln703_2_fu_782_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln291_reg_1030 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        add_ln703_3_reg_1130 <= add_ln703_3_fu_788_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln291_reg_1030 == 1'd0) & (1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        add_ln703_4_reg_1135 <= add_ln703_4_fu_794_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln291_reg_1030 == 1'd0) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        add_ln703_5_reg_1150 <= add_ln703_5_fu_818_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln291_reg_1030 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln703_6_reg_1155 <= add_ln703_6_fu_824_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln291_reg_1030 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        add_ln703_reg_1115 <= add_ln703_fu_770_p2;
        tmpt_V_reg_1110 <= tmpt_V_fu_761_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        and_ln166_2_reg_1026 <= and_ln166_2_fu_534_p2;
        icmp_ln166_1_reg_1009 <= icmp_ln166_1_fu_476_p2;
        icmp_ln166_reg_999 <= icmp_ln166_fu_466_p2;
        pX_load_reg_1020 <= pX;
        pY_load_reg_1014 <= pY;
        sX_load_reg_994 <= sX;
        sY_load_reg_1004 <= sY;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        i_in_reg_1034 <= i_in_fu_546_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((regslice_both_res_V_V_U_apdone_blk == 1'b1) | ((icmp_ln157_fu_437_p2 == 1'd0) & (data_V_V_empty_n == 1'b0))) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_944 <= i_fu_443_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln291_reg_1030 <= icmp_ln291_fu_540_p2;
        icmp_ln291_reg_1030_pp0_iter1_reg <= icmp_ln291_reg_1030;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln291_reg_1030 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        lshr_ln293_reg_1065 <= lshr_ln293_fu_667_p2;
        sub_ln293_2_reg_1060[7 : 1] <= sub_ln293_2_fu_657_p2[7 : 1];
        tmp_11_reg_1095 <= {{weights_V_q0[95:80]}};
        tmp_13_reg_1100 <= {{weights_V_q0[111:96]}};
        tmp_15_reg_1105 <= {{weights_V_q0[127:112]}};
        tmp_3_reg_1075 <= {{weights_V_q0[31:16]}};
        tmp_5_reg_1080 <= {{weights_V_q0[47:32]}};
        tmp_7_reg_1085 <= {{weights_V_q0[63:48]}};
        tmp_9_reg_1090 <= {{weights_V_q0[79:64]}};
        trunc_ln299_reg_1070 <= trunc_ln299_fu_673_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln291_reg_1030 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b1 == ap_CS_fsm_state28) & (res_V_V_TREADY_int == 1'b1)))) begin
        reg_402 <= {{grp_fu_331_p1[31:16]}};
        reg_407 <= {{grp_fu_342_p1[47:32]}};
        reg_412 <= {{grp_fu_352_p1[63:48]}};
        reg_417 <= {{grp_fu_362_p1[79:64]}};
        reg_422 <= {{grp_fu_372_p1[95:80]}};
        reg_427 <= {{grp_fu_382_p1[111:96]}};
        reg_432 <= {{grp_fu_392_p1[127:112]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state35_io) & (1'b1 == ap_CS_fsm_state35) & (icmp_ln187_fu_854_p2 == 1'd1))) begin
        sY <= ap_phi_mux_storemerge_i_phi_fu_279_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        tmp_V_10_reg_964 <= data_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_V_11_reg_969 <= data_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
        tmp_V_12_reg_974 <= data_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        tmp_V_13_reg_979 <= data_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        tmp_V_14_reg_984 <= data_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_V_8_reg_954 <= data_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_V_9_reg_959 <= data_V_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((regslice_both_res_V_V_U_apdone_blk == 1'b1) | ((icmp_ln157_fu_437_p2 == 1'd0) & (data_V_V_empty_n == 1'b0))) & (icmp_ln157_fu_437_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_V_reg_949 <= data_V_V_dout;
    end
end

always @ (*) begin
    if ((icmp_ln291_fu_540_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state17 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state17 = 1'b0;
    end
end

always @ (*) begin
    if ((~((regslice_both_res_V_V_U_apdone_blk == 1'b1) | ((icmp_ln157_fu_437_p2 == 1'd0) & (data_V_V_empty_n == 1'b0))) & (icmp_ln157_fu_437_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln291_reg_1030 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_i_in_0_i_i_phi_fu_246_p4 = i_in_reg_1034;
    end else begin
        ap_phi_mux_i_in_0_i_i_phi_fu_246_p4 = i_in_0_i_i_reg_242;
    end
end

always @ (*) begin
    if (((icmp_ln291_reg_1030 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_phi_mul_phi_fu_257_p4 = add_ln293_reg_1145;
    end else begin
        ap_phi_mux_phi_mul_phi_fu_257_p4 = phi_mul_reg_253;
    end
end

always @ (*) begin
    if (((icmp_ln291_reg_1030 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_phi_urem_phi_fu_269_p4 = select_ln291_reg_1140;
    end else begin
        ap_phi_mux_phi_urem_phi_fu_269_p4 = phi_urem_reg_265;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state35) & (icmp_ln187_fu_854_p2 == 1'd1))) begin
        if ((icmp_ln191_fu_900_p2 == 1'd1)) begin
            ap_phi_mux_storemerge_i_phi_fu_279_p4 = 32'd0;
        end else if ((icmp_ln191_fu_900_p2 == 1'd0)) begin
            ap_phi_mux_storemerge_i_phi_fu_279_p4 = select_ln197_fu_921_p3;
        end else begin
            ap_phi_mux_storemerge_i_phi_fu_279_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_storemerge_i_phi_fu_279_p4 = 'bx;
    end
end

always @ (*) begin
    if ((~((regslice_both_res_V_V_U_apdone_blk == 1'b1) | ((icmp_ln157_fu_437_p2 == 1'd0) & (data_V_V_empty_n == 1'b0))) & (icmp_ln157_fu_437_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((icmp_ln157_fu_437_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        data_V_V_blk_n = data_V_V_empty_n;
    end else begin
        data_V_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((regslice_both_res_V_V_U_apdone_blk == 1'b1) | ((icmp_ln157_fu_437_p2 == 1'd0) & (data_V_V_empty_n == 1'b0))) & (icmp_ln157_fu_437_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)) | ((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state9)) | ((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state8)) | ((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state7)) | ((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state5)) | ((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        data_V_V_read = 1'b1;
    end else begin
        data_V_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_331_p1 = layer_out_i_1_reg_230;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_331_p1 = ap_phi_mux_layer_out_i_1_phi_fu_234_p4;
    end else begin
        grp_fu_331_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_342_p1 = layer_out_i_1_reg_230;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_342_p1 = ap_phi_mux_layer_out_i_1_phi_fu_234_p4;
    end else begin
        grp_fu_342_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_352_p1 = layer_out_i_1_reg_230;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_352_p1 = ap_phi_mux_layer_out_i_1_phi_fu_234_p4;
    end else begin
        grp_fu_352_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_362_p1 = layer_out_i_1_reg_230;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_362_p1 = ap_phi_mux_layer_out_i_1_phi_fu_234_p4;
    end else begin
        grp_fu_362_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_372_p1 = layer_out_i_1_reg_230;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_372_p1 = ap_phi_mux_layer_out_i_1_phi_fu_234_p4;
    end else begin
        grp_fu_372_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_382_p1 = layer_out_i_1_reg_230;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_382_p1 = ap_phi_mux_layer_out_i_1_phi_fu_234_p4;
    end else begin
        grp_fu_382_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_392_p1 = layer_out_i_1_reg_230;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_392_p1 = ap_phi_mux_layer_out_i_1_phi_fu_234_p4;
    end else begin
        grp_fu_392_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln291_reg_1030_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((icmp_ln291_reg_1030 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln291_reg_1030 == 1'd0) & (1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln291_reg_1030 == 1'd0) & (1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln291_reg_1030 == 1'd0) & (1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln291_reg_1030 == 1'd0) & (1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln291_reg_1030 == 1'd0) & (1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        grp_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_325_a_V = tmpt_V_reg_1110;
    end else if (((icmp_ln291_reg_1030 == 1'd0) & (1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_325_a_V = tmpt_V_fu_761_p1;
    end else begin
        grp_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_325_a_V = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln291_reg_1030_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_325_w_V = tmp_15_reg_1105;
    end else if (((icmp_ln291_reg_1030 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_325_w_V = tmp_13_reg_1100;
    end else if (((icmp_ln291_reg_1030 == 1'd0) & (1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_325_w_V = tmp_11_reg_1095;
    end else if (((icmp_ln291_reg_1030 == 1'd0) & (1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_325_w_V = tmp_9_reg_1090;
    end else if (((icmp_ln291_reg_1030 == 1'd0) & (1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_325_w_V = tmp_7_reg_1085;
    end else if (((icmp_ln291_reg_1030 == 1'd0) & (1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_325_w_V = tmp_5_reg_1080;
    end else if (((icmp_ln291_reg_1030 == 1'd0) & (1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_325_w_V = tmp_3_reg_1075;
    end else if (((icmp_ln291_reg_1030 == 1'd0) & (1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_325_w_V = trunc_ln299_reg_1070;
    end else begin
        grp_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_325_w_V = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        layer_in_V_address0 = zext_ln293_fu_558_p1;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state10))) begin
        layer_in_V_address0 = grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_output_V_address0;
    end else begin
        layer_in_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        layer_in_V_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state10))) begin
        layer_in_V_ce0 = grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_output_V_ce0;
    end else begin
        layer_in_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state10))) begin
        layer_in_V_ce1 = grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_output_V_ce1;
    end else begin
        layer_in_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state10))) begin
        layer_in_V_we0 = grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_output_V_we0;
    end else begin
        layer_in_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state10))) begin
        layer_in_V_we1 = grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_output_V_we1;
    end else begin
        layer_in_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | ((1'b1 == ap_CS_fsm_state35) & (1'd1 == and_ln166_2_reg_1026)))) begin
        res_V_V_TDATA_blk_n = res_V_V_TREADY_int;
    end else begin
        res_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        res_V_V_TDATA_int = reg_432;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        res_V_V_TDATA_int = reg_427;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        res_V_V_TDATA_int = reg_422;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        res_V_V_TDATA_int = reg_417;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        res_V_V_TDATA_int = reg_412;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        res_V_V_TDATA_int = reg_407;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        res_V_V_TDATA_int = {{grp_fu_331_p1[31:16]}};
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        res_V_V_TDATA_int = tmp_V_15_fu_849_p1;
    end else begin
        res_V_V_TDATA_int = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state34) & (res_V_V_TREADY_int == 1'b1)) | ((1'b1 == ap_CS_fsm_state33) & (res_V_V_TREADY_int == 1'b1)) | ((1'b1 == ap_CS_fsm_state32) & (res_V_V_TREADY_int == 1'b1)) | ((1'b1 == ap_CS_fsm_state31) & (res_V_V_TREADY_int == 1'b1)) | ((1'b1 == ap_CS_fsm_state30) & (res_V_V_TREADY_int == 1'b1)) | ((1'b1 == ap_CS_fsm_state29) & (res_V_V_TREADY_int == 1'b1)) | ((1'b1 == ap_CS_fsm_state28) & (res_V_V_TREADY_int == 1'b1)) | ((1'b1 == ap_CS_fsm_state27) & (res_V_V_TREADY_int == 1'b1)))) begin
        res_V_V_TVALID_int = 1'b1;
    end else begin
        res_V_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        weights_V_ce0 = 1'b1;
    end else begin
        weights_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((regslice_both_res_V_V_U_apdone_blk == 1'b1) | ((icmp_ln157_fu_437_p2 == 1'd0) & (data_V_V_empty_n == 1'b0))) & (icmp_ln157_fu_437_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((regslice_both_res_V_V_U_apdone_blk == 1'b1) | ((icmp_ln157_fu_437_p2 == 1'd0) & (data_V_V_empty_n == 1'b0))) & (icmp_ln157_fu_437_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state7))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((data_V_V_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (1'd1 == and_ln166_2_fu_534_p2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln291_fu_540_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln291_fu_540_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_state27 : begin
            if (((1'b1 == ap_CS_fsm_state27) & (res_V_V_TREADY_int == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            if (((1'b1 == ap_CS_fsm_state28) & (res_V_V_TREADY_int == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state29 : begin
            if (((1'b1 == ap_CS_fsm_state29) & (res_V_V_TREADY_int == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            if (((1'b1 == ap_CS_fsm_state30) & (res_V_V_TREADY_int == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            if (((1'b1 == ap_CS_fsm_state31) & (res_V_V_TREADY_int == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            if (((1'b1 == ap_CS_fsm_state32) & (res_V_V_TREADY_int == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state33 : begin
            if (((1'b1 == ap_CS_fsm_state33) & (res_V_V_TREADY_int == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            if (((1'b1 == ap_CS_fsm_state34) & (res_V_V_TREADY_int == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state35 : begin
            if (((1'b0 == ap_block_state35_io) & (1'b1 == ap_CS_fsm_state35))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln195_fu_905_p2 = (pY_load_reg_1014 + 32'd1);

assign add_ln197_fu_916_p2 = (sY_load_reg_1004 + 32'd1);

assign add_ln200_fu_859_p2 = (pX_load_reg_1020 + 32'd1);

assign add_ln202_fu_870_p2 = (sX_load_reg_994 + 32'd1);

assign add_ln291_1_fu_552_p2 = (7'd1 + ap_phi_mux_phi_urem_phi_fu_269_p4);

assign add_ln293_fu_812_p2 = (15'd228 + phi_mul_reg_253);

assign add_ln703_1_fu_776_p2 = (grp_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_325_ap_return + reg_402);

assign add_ln703_2_fu_782_p2 = (grp_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_325_ap_return + reg_407);

assign add_ln703_3_fu_788_p2 = (grp_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_325_ap_return + reg_412);

assign add_ln703_4_fu_794_p2 = (grp_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_325_ap_return + reg_417);

assign add_ln703_5_fu_818_p2 = (grp_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_325_ap_return + reg_422);

assign add_ln703_6_fu_824_p2 = (grp_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_325_ap_return + reg_427);

assign add_ln703_7_fu_830_p2 = (grp_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_325_ap_return + reg_432);

assign add_ln703_fu_770_p2 = (grp_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_325_ap_return + trunc_ln1265_fu_766_p1);

assign and_ln166_1_fu_528_p2 = (icmp_ln166_3_fu_516_p2 & icmp_ln166_2_fu_496_p2);

assign and_ln166_2_fu_534_p2 = (and_ln166_fu_522_p2 & and_ln166_1_fu_528_p2);

assign and_ln166_fu_522_p2 = (icmp_ln166_fu_466_p2 & icmp_ln166_1_fu_476_p2);

assign and_ln293_fu_756_p2 = (lshr_ln293_reg_1065 & lshr_ln293_1_fu_750_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_NS_fsm_state10 = ap_NS_fsm[32'd9];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign ap_block_state17_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2 = ((regslice_both_res_V_V_U_apdone_blk == 1'b1) | ((icmp_ln157_fu_437_p2 == 1'd0) & (data_V_V_empty_n == 1'b0)));
end

assign ap_block_state20_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state35_io = ((res_V_V_TREADY_int == 1'b0) & (1'd1 == and_ln166_2_reg_1026));
end

always @ (*) begin
    ap_condition_621 = ((1'b0 == ap_block_state35_io) & (1'b1 == ap_CS_fsm_state35) & (icmp_ln187_fu_854_p2 == 1'd1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_mux_layer_out_i_1_phi_fu_234_p4 = layer_out_i_1_reg_230;

assign empty_19_fu_585_p2 = (tmp_19_fu_578_p3 | 7'd15);

assign grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_ap_start = grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_ap_start_reg;

assign grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_data_V_read = {{{{{{{{tmp_V_14_reg_984}, {tmp_V_13_reg_979}}, {tmp_V_12_reg_974}}, {tmp_V_11_reg_969}}, {tmp_V_10_reg_964}}, {tmp_V_9_reg_959}}, {tmp_V_8_reg_954}}, {tmp_V_reg_949}};

assign i_fu_443_p2 = (i_0_i_reg_219 + 5'd1);

assign i_in_fu_546_p2 = (ap_phi_mux_i_in_0_i_i_phi_fu_246_p4 + 7'd1);

assign icmp_ln157_fu_437_p2 = ((i_0_i_reg_219 == 5'd25) ? 1'b1 : 1'b0);

assign icmp_ln166_1_fu_476_p2 = ((sY == 32'd2) ? 1'b1 : 1'b0);

assign icmp_ln166_2_fu_496_p2 = (($signed(tmp_1_fu_486_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln166_3_fu_516_p2 = (($signed(tmp_2_fu_506_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln166_fu_466_p2 = ((sX == 32'd2) ? 1'b1 : 1'b0);

assign icmp_ln187_fu_854_p2 = ((pX_load_reg_1020 == 32'd4) ? 1'b1 : 1'b0);

assign icmp_ln191_fu_900_p2 = ((pY_load_reg_1014 == 32'd4) ? 1'b1 : 1'b0);

assign icmp_ln291_1_fu_800_p2 = ((add_ln291_1_reg_1039 < 7'd9) ? 1'b1 : 1'b0);

assign icmp_ln291_fu_540_p2 = ((ap_phi_mux_i_in_0_i_i_phi_fu_246_p4 == 7'd72) ? 1'b1 : 1'b0);

assign icmp_ln293_fu_591_p2 = ((tmp_19_fu_578_p3 > empty_19_fu_585_p2) ? 1'b1 : 1'b0);

assign lshr_ln293_1_fu_750_p2 = 128'd340282366920938463463374607431768211455 >> zext_ln293_4_fu_747_p1;

assign lshr_ln293_fu_667_p2 = select_ln293_1_fu_641_p3 >> zext_ln293_3_fu_663_p1;

assign res_V_V_TVALID = regslice_both_res_V_V_U_vld_out;

assign select_ln197_fu_921_p3 = ((icmp_ln166_1_reg_1009[0:0] === 1'b1) ? 32'd2 : add_ln197_fu_916_p2);

assign select_ln202_fu_875_p3 = ((icmp_ln166_reg_999[0:0] === 1'b1) ? 32'd2 : add_ln202_fu_870_p2);

assign select_ln291_fu_805_p3 = ((icmp_ln291_1_fu_800_p2[0:0] === 1'b1) ? add_ln291_1_reg_1039 : 7'd0);

assign select_ln293_1_fu_641_p3 = ((icmp_ln293_fu_591_p2[0:0] === 1'b1) ? tmp_20_fu_605_p4 : layer_in_V_q0);

assign select_ln293_2_fu_649_p3 = ((icmp_ln293_fu_591_p2[0:0] === 1'b1) ? xor_ln293_fu_621_p2 : zext_ln293_1_fu_597_p1);

assign select_ln293_fu_633_p3 = ((icmp_ln293_fu_591_p2[0:0] === 1'b1) ? sub_ln293_fu_615_p2 : sub_ln293_1_fu_627_p2);

assign sub_ln293_1_fu_627_p2 = (zext_ln293_2_fu_601_p1 - zext_ln293_1_fu_597_p1);

assign sub_ln293_2_fu_657_p2 = (8'd127 - select_ln293_fu_633_p3);

assign sub_ln293_fu_615_p2 = (zext_ln293_1_fu_597_p1 - zext_ln293_2_fu_601_p1);

assign tmp_17_fu_836_p9 = {{{{{{{{add_ln703_7_fu_830_p2}, {add_ln703_6_reg_1155}}, {add_ln703_5_reg_1150}}, {add_ln703_4_reg_1135}}, {add_ln703_3_reg_1130}}, {add_ln703_2_reg_1125}}, {add_ln703_1_reg_1120}}, {add_ln703_reg_1115}};

assign tmp_19_fu_578_p3 = {{tmp_18_reg_1050}, {4'd0}};

assign tmp_1_fu_486_p4 = {{pY[31:1]}};

integer ap_tvar_int_0;

always @ (layer_in_V_q0) begin
    for (ap_tvar_int_0 = 128 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 127 - 0) begin
            tmp_20_fu_605_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_20_fu_605_p4[ap_tvar_int_0] = layer_in_V_q0[127 - ap_tvar_int_0];
        end
    end
end

assign tmp_2_fu_506_p4 = {{pX[31:1]}};

assign tmp_V_15_fu_849_p1 = layer_out_i_1_reg_230[15:0];

assign tmpt_V_fu_761_p1 = and_ln293_fu_756_p2[15:0];

assign trunc_ln1265_fu_766_p1 = layer_out_i_1_reg_230[15:0];

assign trunc_ln299_fu_673_p1 = weights_V_q0[15:0];

assign weights_V_address0 = zext_ln299_fu_573_p1;

assign xor_ln293_fu_621_p2 = (zext_ln293_1_fu_597_p1 ^ 8'd127);

assign zext_ln293_1_fu_597_p1 = tmp_19_fu_578_p3;

assign zext_ln293_2_fu_601_p1 = empty_19_fu_585_p2;

assign zext_ln293_3_fu_663_p1 = select_ln293_2_fu_649_p3;

assign zext_ln293_4_fu_747_p1 = sub_ln293_2_reg_1060;

assign zext_ln293_fu_558_p1 = ap_phi_mux_phi_urem_phi_fu_269_p4;

assign zext_ln299_fu_573_p1 = ap_phi_mux_i_in_0_i_i_phi_fu_246_p4;

always @ (posedge ap_clk) begin
    sub_ln293_2_reg_1060[0] <= 1'b0;
end

endmodule //conv_2d_cl_me_ap_fixed_ap_fixed_16_14_5_3_0_config2_s
