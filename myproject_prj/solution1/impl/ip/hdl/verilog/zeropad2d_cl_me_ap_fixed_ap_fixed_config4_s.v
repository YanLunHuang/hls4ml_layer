// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module zeropad2d_cl_me_ap_fixed_ap_fixed_config4_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        data_V_V_TDATA,
        data_V_V_TVALID,
        data_V_V_TREADY,
        res_V_V_TDATA,
        res_V_V_TVALID,
        res_V_V_TREADY
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_pp0_stage0 = 12'd2;
parameter    ap_ST_fsm_state5 = 12'd4;
parameter    ap_ST_fsm_state6 = 12'd8;
parameter    ap_ST_fsm_pp1_stage0 = 12'd16;
parameter    ap_ST_fsm_state10 = 12'd32;
parameter    ap_ST_fsm_pp2_stage0 = 12'd64;
parameter    ap_ST_fsm_state14 = 12'd128;
parameter    ap_ST_fsm_pp3_stage0 = 12'd256;
parameter    ap_ST_fsm_state18 = 12'd512;
parameter    ap_ST_fsm_pp4_stage0 = 12'd1024;
parameter    ap_ST_fsm_state22 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] data_V_V_TDATA;
input   data_V_V_TVALID;
output   data_V_V_TREADY;
output  [15:0] res_V_V_TDATA;
output   res_V_V_TVALID;
input   res_V_V_TREADY;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_V_V_TREADY;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    data_V_V_TDATA_blk_n;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_pp2_stage0;
wire   [0:0] icmp_ln121_fu_202_p2;
reg    res_V_V_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln112_reg_238;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln112_reg_238_pp0_iter1_reg;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage0;
reg   [0:0] icmp_ln23_reg_256;
reg    ap_enable_reg_pp1_iter2;
reg   [0:0] icmp_ln23_reg_256_pp1_iter1_reg;
reg    ap_enable_reg_pp2_iter1;
reg   [0:0] icmp_ln121_reg_265;
reg    ap_enable_reg_pp2_iter2;
reg   [0:0] icmp_ln121_reg_265_pp2_iter1_reg;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter1;
wire    ap_block_pp3_stage0;
reg   [0:0] icmp_ln23_1_reg_279;
reg    ap_enable_reg_pp3_iter2;
reg   [0:0] icmp_ln23_1_reg_279_pp3_iter1_reg;
wire    ap_CS_fsm_pp4_stage0;
reg    ap_enable_reg_pp4_iter1;
wire    ap_block_pp4_stage0;
reg   [0:0] icmp_ln130_reg_288;
reg    ap_enable_reg_pp4_iter2;
reg   [0:0] icmp_ln130_reg_288_pp4_iter1_reg;
reg   [10:0] indvar_flatten_reg_100;
reg   [8:0] c_0_i28_reg_122;
reg   [9:0] indvar_flatten11_reg_133;
reg   [8:0] c_0_i22_reg_144;
reg   [10:0] indvar_flatten23_reg_155;
wire   [0:0] icmp_ln112_fu_166_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state3_io;
wire    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_state4_io;
reg    ap_block_pp0_stage0_11001;
wire   [10:0] add_ln112_fu_172_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln117_fu_178_p2;
wire    ap_CS_fsm_state6;
wire   [1:0] i_fu_184_p2;
reg   [1:0] i_reg_251;
wire   [0:0] icmp_ln23_fu_190_p2;
wire    ap_block_state7_pp1_stage0_iter0;
wire    ap_block_state8_pp1_stage0_iter1;
reg    ap_block_state8_io;
wire    ap_block_state9_pp1_stage0_iter2;
reg    ap_block_state9_io;
reg    ap_block_pp1_stage0_11001;
wire   [8:0] c_fu_196_p2;
reg    ap_enable_reg_pp1_iter0;
reg    ap_block_state11_pp2_stage0_iter0;
wire    ap_block_state12_pp2_stage0_iter1;
reg    ap_block_state12_io;
wire    ap_block_state13_pp2_stage0_iter2;
reg    ap_block_state13_io;
reg    ap_block_pp2_stage0_11001;
wire   [9:0] add_ln121_fu_208_p2;
reg   [15:0] tmp_V_reg_274;
wire   [0:0] icmp_ln23_1_fu_214_p2;
wire    ap_block_state15_pp3_stage0_iter0;
wire    ap_block_state16_pp3_stage0_iter1;
reg    ap_block_state16_io;
wire    ap_block_state17_pp3_stage0_iter2;
reg    ap_block_state17_io;
reg    ap_block_pp3_stage0_11001;
wire   [8:0] c_1_fu_220_p2;
reg    ap_enable_reg_pp3_iter0;
wire   [0:0] icmp_ln130_fu_226_p2;
wire    ap_block_state19_pp4_stage0_iter0;
wire    ap_block_state20_pp4_stage0_iter1;
reg    ap_block_state20_io;
wire    ap_block_state21_pp4_stage0_iter2;
reg    ap_block_state21_io;
reg    ap_block_pp4_stage0_11001;
wire   [10:0] add_ln130_fu_232_p2;
reg    ap_enable_reg_pp4_iter0;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state7;
wire    ap_CS_fsm_state10;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state11;
wire    ap_CS_fsm_state14;
reg    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state15;
reg    ap_block_pp4_stage0_subdone;
reg    ap_condition_pp4_exit_iter0_state19;
reg   [1:0] i1_0_reg_111;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state5;
wire    ap_block_pp0_stage0_01001;
wire    ap_block_pp1_stage0_01001;
reg    ap_block_pp2_stage0_01001;
wire    ap_block_pp3_stage0_01001;
wire    ap_block_pp4_stage0_01001;
wire    ap_CS_fsm_state22;
wire    regslice_both_res_V_V_U_apdone_blk;
reg   [11:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;
wire    regslice_both_data_V_V_U_apdone_blk;
wire   [15:0] data_V_V_TDATA_int;
wire    data_V_V_TVALID_int;
reg    data_V_V_TREADY_int;
wire    regslice_both_data_V_V_U_ack_in;
reg   [15:0] res_V_V_TDATA_int;
reg    res_V_V_TVALID_int;
wire    res_V_V_TREADY_int;
wire    regslice_both_res_V_V_U_vld_out;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 12'd1;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
end

regslice_both #(
    .DataWidth( 16 ))
regslice_both_data_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(data_V_V_TDATA),
    .vld_in(data_V_V_TVALID),
    .ack_in(regslice_both_data_V_V_U_ack_in),
    .data_out(data_V_V_TDATA_int),
    .vld_out(data_V_V_TVALID_int),
    .ack_out(data_V_V_TREADY_int),
    .apdone_blk(regslice_both_data_V_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 16 ))
regslice_both_res_V_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(res_V_V_TDATA_int),
    .vld_in(res_V_V_TVALID_int),
    .ack_in(res_V_V_TREADY_int),
    .data_out(res_V_V_TDATA),
    .vld_out(regslice_both_res_V_V_U_vld_out),
    .ack_out(res_V_V_TREADY),
    .apdone_blk(regslice_both_res_V_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((regslice_both_res_V_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state22))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state7))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((icmp_ln117_fu_178_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state7)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state7);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if (((icmp_ln117_fu_178_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b1 == ap_condition_pp2_exit_iter0_state11))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state11)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state11);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp3_stage0_subdone) & (1'b1 == ap_condition_pp3_exit_iter0_state15) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state14)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state15)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state15);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end else if ((1'b1 == ap_CS_fsm_state14)) begin
            ap_enable_reg_pp3_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp4_stage0_subdone) & (1'b1 == ap_condition_pp4_exit_iter0_state19) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if (((icmp_ln117_fu_178_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp4_exit_iter0_state19)) begin
                ap_enable_reg_pp4_iter1 <= (1'b1 ^ ap_condition_pp4_exit_iter0_state19);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
            ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
        end else if (((icmp_ln117_fu_178_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
            ap_enable_reg_pp4_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_1_fu_214_p2 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        c_0_i22_reg_144 <= c_1_fu_220_p2;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        c_0_i22_reg_144 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_fu_190_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        c_0_i28_reg_122 <= c_fu_196_p2;
    end else if (((icmp_ln117_fu_178_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        c_0_i28_reg_122 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i1_0_reg_111 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        i1_0_reg_111 <= i_reg_251;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln121_fu_202_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        indvar_flatten11_reg_133 <= add_ln121_fu_208_p2;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        indvar_flatten11_reg_133 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln130_fu_226_p2 == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        indvar_flatten23_reg_155 <= add_ln130_fu_232_p2;
    end else if (((icmp_ln117_fu_178_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        indvar_flatten23_reg_155 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln112_fu_166_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_100 <= add_ln112_fu_172_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_100 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_reg_251 <= i_fu_184_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln112_reg_238 <= icmp_ln112_fu_166_p2;
        icmp_ln112_reg_238_pp0_iter1_reg <= icmp_ln112_reg_238;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        icmp_ln121_reg_265 <= icmp_ln121_fu_202_p2;
        icmp_ln121_reg_265_pp2_iter1_reg <= icmp_ln121_reg_265;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp4_stage0_11001) & (1'b1 == ap_CS_fsm_pp4_stage0))) begin
        icmp_ln130_reg_288 <= icmp_ln130_fu_226_p2;
        icmp_ln130_reg_288_pp4_iter1_reg <= icmp_ln130_reg_288;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp3_stage0_11001) & (1'b1 == ap_CS_fsm_pp3_stage0))) begin
        icmp_ln23_1_reg_279 <= icmp_ln23_1_fu_214_p2;
        icmp_ln23_1_reg_279_pp3_iter1_reg <= icmp_ln23_1_reg_279;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln23_reg_256 <= icmp_ln23_fu_190_p2;
        icmp_ln23_reg_256_pp1_iter1_reg <= icmp_ln23_reg_256;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln121_fu_202_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        tmp_V_reg_274 <= data_V_V_TDATA_int;
    end
end

always @ (*) begin
    if ((icmp_ln112_fu_166_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln23_fu_190_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state7 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state7 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln121_fu_202_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state11 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state11 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln23_1_fu_214_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state15 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state15 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln130_fu_226_p2 == 1'd1)) begin
        ap_condition_pp4_exit_iter0_state19 = 1'b1;
    end else begin
        ap_condition_pp4_exit_iter0_state19 = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_res_V_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state22))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter0 == 1'b0) & (ap_enable_reg_pp4_iter2 == 1'b0) & (ap_enable_reg_pp4_iter1 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_res_V_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state22))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln121_fu_202_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        data_V_V_TDATA_blk_n = data_V_V_TVALID_int;
    end else begin
        data_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_data_V_V_U_ack_in == 1'b1) & (data_V_V_TVALID == 1'b1))) begin
        data_V_V_TREADY = 1'b1;
    end else begin
        data_V_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln121_fu_202_p2 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        data_V_V_TREADY_int = 1'b1;
    end else begin
        data_V_V_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0) & (icmp_ln23_reg_256_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b0 == ap_block_pp1_stage0) & (icmp_ln23_reg_256 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (icmp_ln112_reg_238_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (icmp_ln112_reg_238 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln121_reg_265_pp2_iter1_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((icmp_ln121_reg_265 == 1'd0) & (1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1)) | ((icmp_ln130_reg_288_pp4_iter1_reg == 1'd0) & (ap_enable_reg_pp4_iter2 == 1'b1) & (1'b0 == ap_block_pp4_stage0)) | ((icmp_ln130_reg_288 == 1'd0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0)) | ((icmp_ln23_1_reg_279_pp3_iter1_reg == 1'd0) & (ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0)) | ((icmp_ln23_1_reg_279 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0)))) begin
        res_V_V_TDATA_blk_n = res_V_V_TREADY_int;
    end else begin
        res_V_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln121_reg_265 == 1'd0) & (1'b0 == ap_block_pp2_stage0_01001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1))) begin
        res_V_V_TDATA_int = tmp_V_reg_274;
    end else if ((((icmp_ln23_reg_256 == 1'd0) & (1'b0 == ap_block_pp1_stage0_01001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((icmp_ln112_reg_238 == 1'd0) & (1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln130_reg_288 == 1'd0) & (1'b0 == ap_block_pp4_stage0_01001) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((icmp_ln23_1_reg_279 == 1'd0) & (1'b0 == ap_block_pp3_stage0_01001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)))) begin
        res_V_V_TDATA_int = 16'd0;
    end else begin
        res_V_V_TDATA_int = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln23_reg_256 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((icmp_ln112_reg_238 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((icmp_ln121_reg_265 == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1)) | ((icmp_ln130_reg_288 == 1'd0) & (1'b0 == ap_block_pp4_stage0_11001) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0)) | ((icmp_ln23_1_reg_279 == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0)))) begin
        res_V_V_TVALID_int = 1'b1;
    end else begin
        res_V_V_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln112_fu_166_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln112_fu_166_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln117_fu_178_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln23_fu_190_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln23_fu_190_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((icmp_ln121_fu_202_p2 == 1'd1) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter2 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((icmp_ln121_fu_202_p2 == 1'd1) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter0 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0)) | ((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter2 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((1'b0 == ap_block_pp3_stage0_subdone) & (icmp_ln23_1_fu_214_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (ap_enable_reg_pp3_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter2 == 1'b1) & (ap_enable_reg_pp3_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((1'b0 == ap_block_pp3_stage0_subdone) & (icmp_ln23_1_fu_214_p2 == 1'd1) & (ap_enable_reg_pp3_iter0 == 1'b1) & (ap_enable_reg_pp3_iter1 == 1'b0)) | ((1'b0 == ap_block_pp3_stage0_subdone) & (ap_enable_reg_pp3_iter2 == 1'b1) & (ap_enable_reg_pp3_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_pp4_stage0 : begin
            if ((~((1'b0 == ap_block_pp4_stage0_subdone) & (icmp_ln130_fu_226_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (ap_enable_reg_pp4_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter2 == 1'b1) & (ap_enable_reg_pp4_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if ((((1'b0 == ap_block_pp4_stage0_subdone) & (icmp_ln130_fu_226_p2 == 1'd1) & (ap_enable_reg_pp4_iter0 == 1'b1) & (ap_enable_reg_pp4_iter1 == 1'b0)) | ((1'b0 == ap_block_pp4_stage0_subdone) & (ap_enable_reg_pp4_iter2 == 1'b1) & (ap_enable_reg_pp4_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((regslice_both_res_V_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln112_fu_172_p2 = (indvar_flatten_reg_100 + 11'd1);

assign add_ln121_fu_208_p2 = (indvar_flatten11_reg_133 + 10'd1);

assign add_ln130_fu_232_p2 = (indvar_flatten23_reg_155 + 11'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((1'b1 == ap_block_state9_io) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b1 == ap_block_state8_io) & (ap_enable_reg_pp1_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((1'b1 == ap_block_state9_io) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((1'b1 == ap_block_state8_io) & (ap_enable_reg_pp1_iter1 == 1'b1)));
end

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_01001 = ((icmp_ln121_fu_202_p2 == 1'd0) & (data_V_V_TVALID_int == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp2_stage0_11001 = (((icmp_ln121_fu_202_p2 == 1'd0) & (data_V_V_TVALID_int == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b1 == ap_block_state13_io) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((1'b1 == ap_block_state12_io) & (ap_enable_reg_pp2_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = (((icmp_ln121_fu_202_p2 == 1'd0) & (data_V_V_TVALID_int == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b1)) | ((1'b1 == ap_block_state13_io) & (ap_enable_reg_pp2_iter2 == 1'b1)) | ((1'b1 == ap_block_state12_io) & (ap_enable_reg_pp2_iter1 == 1'b1)));
end

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp3_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage0_11001 = (((1'b1 == ap_block_state17_io) & (ap_enable_reg_pp3_iter2 == 1'b1)) | ((1'b1 == ap_block_state16_io) & (ap_enable_reg_pp3_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp3_stage0_subdone = (((1'b1 == ap_block_state17_io) & (ap_enable_reg_pp3_iter2 == 1'b1)) | ((1'b1 == ap_block_state16_io) & (ap_enable_reg_pp3_iter1 == 1'b1)));
end

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp4_stage0_11001 = (((1'b1 == ap_block_state21_io) & (ap_enable_reg_pp4_iter2 == 1'b1)) | ((1'b1 == ap_block_state20_io) & (ap_enable_reg_pp4_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp4_stage0_subdone = (((1'b1 == ap_block_state21_io) & (ap_enable_reg_pp4_iter2 == 1'b1)) | ((1'b1 == ap_block_state20_io) & (ap_enable_reg_pp4_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state11_pp2_stage0_iter0 = ((icmp_ln121_fu_202_p2 == 1'd0) & (data_V_V_TVALID_int == 1'b0));
end

always @ (*) begin
    ap_block_state12_io = ((icmp_ln121_reg_265 == 1'd0) & (res_V_V_TREADY_int == 1'b0));
end

assign ap_block_state12_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13_io = ((icmp_ln121_reg_265_pp2_iter1_reg == 1'd0) & (res_V_V_TREADY_int == 1'b0));
end

assign ap_block_state13_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state16_io = ((icmp_ln23_1_reg_279 == 1'd0) & (res_V_V_TREADY_int == 1'b0));
end

assign ap_block_state16_pp3_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state17_io = ((icmp_ln23_1_reg_279_pp3_iter1_reg == 1'd0) & (res_V_V_TREADY_int == 1'b0));
end

assign ap_block_state17_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state20_io = ((icmp_ln130_reg_288 == 1'd0) & (res_V_V_TREADY_int == 1'b0));
end

assign ap_block_state20_pp4_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state21_io = ((icmp_ln130_reg_288_pp4_iter1_reg == 1'd0) & (res_V_V_TREADY_int == 1'b0));
end

assign ap_block_state21_pp4_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((icmp_ln112_reg_238 == 1'd0) & (res_V_V_TREADY_int == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((icmp_ln112_reg_238_pp0_iter1_reg == 1'd0) & (res_V_V_TREADY_int == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_io = ((icmp_ln23_reg_256 == 1'd0) & (res_V_V_TREADY_int == 1'b0));
end

assign ap_block_state8_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_io = ((icmp_ln23_reg_256_pp1_iter1_reg == 1'd0) & (res_V_V_TREADY_int == 1'b0));
end

assign ap_block_state9_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

assign c_1_fu_220_p2 = (c_0_i22_reg_144 + 9'd1);

assign c_fu_196_p2 = (c_0_i28_reg_122 + 9'd1);

assign i_fu_184_p2 = (i1_0_reg_111 + 2'd1);

assign icmp_ln112_fu_166_p2 = ((indvar_flatten_reg_100 == 11'd1280) ? 1'b1 : 1'b0);

assign icmp_ln117_fu_178_p2 = ((i1_0_reg_111 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln121_fu_202_p2 = ((indvar_flatten11_reg_133 == 10'd768) ? 1'b1 : 1'b0);

assign icmp_ln130_fu_226_p2 = ((indvar_flatten23_reg_155 == 11'd1280) ? 1'b1 : 1'b0);

assign icmp_ln23_1_fu_214_p2 = ((c_0_i22_reg_144 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_190_p2 = ((c_0_i28_reg_122 == 9'd256) ? 1'b1 : 1'b0);

assign res_V_V_TVALID = regslice_both_res_V_V_U_vld_out;

endmodule //zeropad2d_cl_me_ap_fixed_ap_fixed_config4_s
