-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity relu_array_ap_fixed_ap_fixed_relu_config55_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_0_V_V_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    data_0_V_V_TVALID : IN STD_LOGIC;
    data_0_V_V_TREADY : OUT STD_LOGIC;
    data_1_V_V_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    data_1_V_V_TVALID : IN STD_LOGIC;
    data_1_V_V_TREADY : OUT STD_LOGIC;
    data_2_V_V_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    data_2_V_V_TVALID : IN STD_LOGIC;
    data_2_V_V_TREADY : OUT STD_LOGIC;
    data_3_V_V_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    data_3_V_V_TVALID : IN STD_LOGIC;
    data_3_V_V_TREADY : OUT STD_LOGIC;
    res_0_V_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_0_V_V_TVALID : OUT STD_LOGIC;
    res_0_V_V_TREADY : IN STD_LOGIC;
    res_1_V_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_1_V_V_TVALID : OUT STD_LOGIC;
    res_1_V_V_TREADY : IN STD_LOGIC;
    res_2_V_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_2_V_V_TVALID : OUT STD_LOGIC;
    res_2_V_V_TREADY : IN STD_LOGIC;
    res_3_V_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_3_V_V_TVALID : OUT STD_LOGIC;
    res_3_V_V_TREADY : IN STD_LOGIC );
end;


architecture behav of relu_array_ap_fixed_ap_fixed_relu_config55_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_268 : STD_LOGIC_VECTOR (9 downto 0) := "1001101000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal data_0_V_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln79_fu_121_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_1_V_V_TDATA_blk_n : STD_LOGIC;
    signal data_2_V_V_TDATA_blk_n : STD_LOGIC;
    signal data_3_V_V_TDATA_blk_n : STD_LOGIC;
    signal res_0_V_V_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal icmp_ln79_reg_221 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal icmp_ln79_reg_221_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal res_1_V_V_TDATA_blk_n : STD_LOGIC;
    signal res_2_V_V_TDATA_blk_n : STD_LOGIC;
    signal res_3_V_V_TDATA_blk_n : STD_LOGIC;
    signal i_0_reg_110 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_fu_127_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_V_fu_155_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_V_reg_230 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_V_2_fu_169_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_V_2_reg_235 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_V_4_fu_183_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_V_4_reg_240 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_V_6_fu_197_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_V_6_reg_245 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln1494_fu_149_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln203_fu_133_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln1494_1_fu_163_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln203_1_fu_137_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln1494_2_fu_177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln203_2_fu_141_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln1494_3_fu_191_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln203_3_fu_145_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal regslice_both_res_0_V_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_res_1_V_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_res_2_V_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_res_3_V_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state5 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_data_0_V_V_U_apdone_blk : STD_LOGIC;
    signal data_0_V_V_TDATA_int : STD_LOGIC_VECTOR (15 downto 0);
    signal data_0_V_V_TVALID_int : STD_LOGIC;
    signal data_0_V_V_TREADY_int : STD_LOGIC;
    signal regslice_both_data_0_V_V_U_ack_in : STD_LOGIC;
    signal regslice_both_data_1_V_V_U_apdone_blk : STD_LOGIC;
    signal data_1_V_V_TDATA_int : STD_LOGIC_VECTOR (15 downto 0);
    signal data_1_V_V_TVALID_int : STD_LOGIC;
    signal data_1_V_V_TREADY_int : STD_LOGIC;
    signal regslice_both_data_1_V_V_U_ack_in : STD_LOGIC;
    signal regslice_both_data_2_V_V_U_apdone_blk : STD_LOGIC;
    signal data_2_V_V_TDATA_int : STD_LOGIC_VECTOR (15 downto 0);
    signal data_2_V_V_TVALID_int : STD_LOGIC;
    signal data_2_V_V_TREADY_int : STD_LOGIC;
    signal regslice_both_data_2_V_V_U_ack_in : STD_LOGIC;
    signal regslice_both_data_3_V_V_U_apdone_blk : STD_LOGIC;
    signal data_3_V_V_TDATA_int : STD_LOGIC_VECTOR (15 downto 0);
    signal data_3_V_V_TVALID_int : STD_LOGIC;
    signal data_3_V_V_TREADY_int : STD_LOGIC;
    signal regslice_both_data_3_V_V_U_ack_in : STD_LOGIC;
    signal res_0_V_V_TDATA_int : STD_LOGIC_VECTOR (15 downto 0);
    signal res_0_V_V_TVALID_int : STD_LOGIC;
    signal res_0_V_V_TREADY_int : STD_LOGIC;
    signal regslice_both_res_0_V_V_U_vld_out : STD_LOGIC;
    signal res_1_V_V_TDATA_int : STD_LOGIC_VECTOR (15 downto 0);
    signal res_1_V_V_TVALID_int : STD_LOGIC;
    signal res_1_V_V_TREADY_int : STD_LOGIC;
    signal regslice_both_res_1_V_V_U_vld_out : STD_LOGIC;
    signal res_2_V_V_TDATA_int : STD_LOGIC_VECTOR (15 downto 0);
    signal res_2_V_V_TVALID_int : STD_LOGIC;
    signal res_2_V_V_TREADY_int : STD_LOGIC;
    signal regslice_both_res_2_V_V_U_vld_out : STD_LOGIC;
    signal res_3_V_V_TDATA_int : STD_LOGIC_VECTOR (15 downto 0);
    signal res_3_V_V_TVALID_int : STD_LOGIC;
    signal res_3_V_V_TREADY_int : STD_LOGIC;
    signal regslice_both_res_3_V_V_U_vld_out : STD_LOGIC;

    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    regslice_both_data_0_V_V_U : component regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => data_0_V_V_TDATA,
        vld_in => data_0_V_V_TVALID,
        ack_in => regslice_both_data_0_V_V_U_ack_in,
        data_out => data_0_V_V_TDATA_int,
        vld_out => data_0_V_V_TVALID_int,
        ack_out => data_0_V_V_TREADY_int,
        apdone_blk => regslice_both_data_0_V_V_U_apdone_blk);

    regslice_both_data_1_V_V_U : component regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => data_1_V_V_TDATA,
        vld_in => data_1_V_V_TVALID,
        ack_in => regslice_both_data_1_V_V_U_ack_in,
        data_out => data_1_V_V_TDATA_int,
        vld_out => data_1_V_V_TVALID_int,
        ack_out => data_1_V_V_TREADY_int,
        apdone_blk => regslice_both_data_1_V_V_U_apdone_blk);

    regslice_both_data_2_V_V_U : component regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => data_2_V_V_TDATA,
        vld_in => data_2_V_V_TVALID,
        ack_in => regslice_both_data_2_V_V_U_ack_in,
        data_out => data_2_V_V_TDATA_int,
        vld_out => data_2_V_V_TVALID_int,
        ack_out => data_2_V_V_TREADY_int,
        apdone_blk => regslice_both_data_2_V_V_U_apdone_blk);

    regslice_both_data_3_V_V_U : component regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => data_3_V_V_TDATA,
        vld_in => data_3_V_V_TVALID,
        ack_in => regslice_both_data_3_V_V_U_ack_in,
        data_out => data_3_V_V_TDATA_int,
        vld_out => data_3_V_V_TVALID_int,
        ack_out => data_3_V_V_TREADY_int,
        apdone_blk => regslice_both_data_3_V_V_U_apdone_blk);

    regslice_both_res_0_V_V_U : component regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => res_0_V_V_TDATA_int,
        vld_in => res_0_V_V_TVALID_int,
        ack_in => res_0_V_V_TREADY_int,
        data_out => res_0_V_V_TDATA,
        vld_out => regslice_both_res_0_V_V_U_vld_out,
        ack_out => res_0_V_V_TREADY,
        apdone_blk => regslice_both_res_0_V_V_U_apdone_blk);

    regslice_both_res_1_V_V_U : component regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => res_1_V_V_TDATA_int,
        vld_in => res_1_V_V_TVALID_int,
        ack_in => res_1_V_V_TREADY_int,
        data_out => res_1_V_V_TDATA,
        vld_out => regslice_both_res_1_V_V_U_vld_out,
        ack_out => res_1_V_V_TREADY,
        apdone_blk => regslice_both_res_1_V_V_U_apdone_blk);

    regslice_both_res_2_V_V_U : component regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => res_2_V_V_TDATA_int,
        vld_in => res_2_V_V_TVALID_int,
        ack_in => res_2_V_V_TREADY_int,
        data_out => res_2_V_V_TDATA,
        vld_out => regslice_both_res_2_V_V_U_vld_out,
        ack_out => res_2_V_V_TREADY,
        apdone_blk => regslice_both_res_2_V_V_U_apdone_blk);

    regslice_both_res_3_V_V_U : component regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => res_3_V_V_TDATA_int,
        vld_in => res_3_V_V_TVALID_int,
        ack_in => res_3_V_V_TREADY_int,
        data_out => res_3_V_V_TDATA,
        vld_out => regslice_both_res_3_V_V_U_vld_out,
        ack_out => res_3_V_V_TREADY,
        apdone_blk => regslice_both_res_3_V_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((regslice_both_res_3_V_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_2_V_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_1_V_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_0_V_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln79_fu_121_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_0_reg_110 <= i_fu_127_p2;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_110 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln79_reg_221 <= icmp_ln79_fu_121_p2;
                icmp_ln79_reg_221_pp0_iter1_reg <= icmp_ln79_reg_221;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln79_fu_121_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_V_2_reg_235 <= tmp_V_2_fu_169_p3;
                tmp_V_4_reg_240 <= tmp_V_4_fu_183_p3;
                tmp_V_6_reg_245 <= tmp_V_6_fu_197_p3;
                tmp_V_reg_230 <= tmp_V_fu_155_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln79_fu_121_p2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone, ap_CS_fsm_state5, regslice_both_res_0_V_V_U_apdone_blk, regslice_both_res_1_V_V_U_apdone_blk, regslice_both_res_2_V_V_U_apdone_blk, regslice_both_res_3_V_V_U_apdone_blk)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln79_fu_121_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln79_fu_121_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                if ((not(((regslice_both_res_3_V_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_2_V_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_1_V_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_0_V_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln79_fu_121_p2, data_0_V_V_TVALID_int, data_1_V_V_TVALID_int, data_2_V_V_TVALID_int, data_3_V_V_TVALID_int)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((icmp_ln79_fu_121_p2 = ap_const_lv1_0) and (data_3_V_V_TVALID_int = ap_const_logic_0)) or ((icmp_ln79_fu_121_p2 = ap_const_lv1_0) and (data_2_V_V_TVALID_int = ap_const_logic_0)) or ((icmp_ln79_fu_121_p2 = ap_const_lv1_0) and (data_1_V_V_TVALID_int = ap_const_logic_0)) or ((icmp_ln79_fu_121_p2 = ap_const_lv1_0) and (data_0_V_V_TVALID_int = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln79_fu_121_p2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_state3_io, ap_block_state4_io, data_0_V_V_TVALID_int, data_1_V_V_TVALID_int, data_2_V_V_TVALID_int, data_3_V_V_TVALID_int)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state3_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((icmp_ln79_fu_121_p2 = ap_const_lv1_0) and (data_3_V_V_TVALID_int = ap_const_logic_0)) or ((icmp_ln79_fu_121_p2 = ap_const_lv1_0) and (data_2_V_V_TVALID_int = ap_const_logic_0)) or ((icmp_ln79_fu_121_p2 = ap_const_lv1_0) and (data_1_V_V_TVALID_int = ap_const_logic_0)) or ((icmp_ln79_fu_121_p2 = ap_const_lv1_0) and (data_0_V_V_TVALID_int = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln79_fu_121_p2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_state3_io, ap_block_state4_io, data_0_V_V_TVALID_int, data_1_V_V_TVALID_int, data_2_V_V_TVALID_int, data_3_V_V_TVALID_int)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state3_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (((icmp_ln79_fu_121_p2 = ap_const_lv1_0) and (data_3_V_V_TVALID_int = ap_const_logic_0)) or ((icmp_ln79_fu_121_p2 = ap_const_lv1_0) and (data_2_V_V_TVALID_int = ap_const_logic_0)) or ((icmp_ln79_fu_121_p2 = ap_const_lv1_0) and (data_1_V_V_TVALID_int = ap_const_logic_0)) or ((icmp_ln79_fu_121_p2 = ap_const_lv1_0) and (data_0_V_V_TVALID_int = ap_const_logic_0)))));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_pp0_stage0_iter0_assign_proc : process(icmp_ln79_fu_121_p2, data_0_V_V_TVALID_int, data_1_V_V_TVALID_int, data_2_V_V_TVALID_int, data_3_V_V_TVALID_int)
    begin
                ap_block_state2_pp0_stage0_iter0 <= (((icmp_ln79_fu_121_p2 = ap_const_lv1_0) and (data_3_V_V_TVALID_int = ap_const_logic_0)) or ((icmp_ln79_fu_121_p2 = ap_const_lv1_0) and (data_2_V_V_TVALID_int = ap_const_logic_0)) or ((icmp_ln79_fu_121_p2 = ap_const_lv1_0) and (data_1_V_V_TVALID_int = ap_const_logic_0)) or ((icmp_ln79_fu_121_p2 = ap_const_lv1_0) and (data_0_V_V_TVALID_int = ap_const_logic_0)));
    end process;


    ap_block_state3_io_assign_proc : process(icmp_ln79_reg_221, res_0_V_V_TREADY_int, res_1_V_V_TREADY_int, res_2_V_V_TREADY_int, res_3_V_V_TREADY_int)
    begin
                ap_block_state3_io <= (((icmp_ln79_reg_221 = ap_const_lv1_0) and (res_3_V_V_TREADY_int = ap_const_logic_0)) or ((icmp_ln79_reg_221 = ap_const_lv1_0) and (res_2_V_V_TREADY_int = ap_const_logic_0)) or ((icmp_ln79_reg_221 = ap_const_lv1_0) and (res_1_V_V_TREADY_int = ap_const_logic_0)) or ((icmp_ln79_reg_221 = ap_const_lv1_0) and (res_0_V_V_TREADY_int = ap_const_logic_0)));
    end process;

        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_assign_proc : process(icmp_ln79_reg_221_pp0_iter1_reg, res_0_V_V_TREADY_int, res_1_V_V_TREADY_int, res_2_V_V_TREADY_int, res_3_V_V_TREADY_int)
    begin
                ap_block_state4_io <= (((icmp_ln79_reg_221_pp0_iter1_reg = ap_const_lv1_0) and (res_3_V_V_TREADY_int = ap_const_logic_0)) or ((icmp_ln79_reg_221_pp0_iter1_reg = ap_const_lv1_0) and (res_2_V_V_TREADY_int = ap_const_logic_0)) or ((icmp_ln79_reg_221_pp0_iter1_reg = ap_const_lv1_0) and (res_1_V_V_TREADY_int = ap_const_logic_0)) or ((icmp_ln79_reg_221_pp0_iter1_reg = ap_const_lv1_0) and (res_0_V_V_TREADY_int = ap_const_logic_0)));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_assign_proc : process(regslice_both_res_0_V_V_U_apdone_blk, regslice_both_res_1_V_V_U_apdone_blk, regslice_both_res_2_V_V_U_apdone_blk, regslice_both_res_3_V_V_U_apdone_blk)
    begin
                ap_block_state5 <= ((regslice_both_res_3_V_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_2_V_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_1_V_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_0_V_V_U_apdone_blk = ap_const_logic_1));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln79_fu_121_p2)
    begin
        if ((icmp_ln79_fu_121_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state5, regslice_both_res_0_V_V_U_apdone_blk, regslice_both_res_1_V_V_U_apdone_blk, regslice_both_res_2_V_V_U_apdone_blk, regslice_both_res_3_V_V_U_apdone_blk)
    begin
        if ((not(((regslice_both_res_3_V_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_2_V_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_1_V_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_0_V_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, regslice_both_res_0_V_V_U_apdone_blk, regslice_both_res_1_V_V_U_apdone_blk, regslice_both_res_2_V_V_U_apdone_blk, regslice_both_res_3_V_V_U_apdone_blk)
    begin
        if ((not(((regslice_both_res_3_V_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_2_V_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_1_V_V_U_apdone_blk = ap_const_logic_1) or (regslice_both_res_0_V_V_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    data_0_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, icmp_ln79_fu_121_p2, data_0_V_V_TVALID_int)
    begin
        if (((icmp_ln79_fu_121_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_0_V_V_TDATA_blk_n <= data_0_V_V_TVALID_int;
        else 
            data_0_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_0_V_V_TREADY_assign_proc : process(data_0_V_V_TVALID, regslice_both_data_0_V_V_U_ack_in)
    begin
        if (((regslice_both_data_0_V_V_U_ack_in = ap_const_logic_1) and (data_0_V_V_TVALID = ap_const_logic_1))) then 
            data_0_V_V_TREADY <= ap_const_logic_1;
        else 
            data_0_V_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    data_0_V_V_TREADY_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln79_fu_121_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln79_fu_121_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_0_V_V_TREADY_int <= ap_const_logic_1;
        else 
            data_0_V_V_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    data_1_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, icmp_ln79_fu_121_p2, data_1_V_V_TVALID_int)
    begin
        if (((icmp_ln79_fu_121_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_1_V_V_TDATA_blk_n <= data_1_V_V_TVALID_int;
        else 
            data_1_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_1_V_V_TREADY_assign_proc : process(data_1_V_V_TVALID, regslice_both_data_1_V_V_U_ack_in)
    begin
        if (((regslice_both_data_1_V_V_U_ack_in = ap_const_logic_1) and (data_1_V_V_TVALID = ap_const_logic_1))) then 
            data_1_V_V_TREADY <= ap_const_logic_1;
        else 
            data_1_V_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    data_1_V_V_TREADY_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln79_fu_121_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln79_fu_121_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_1_V_V_TREADY_int <= ap_const_logic_1;
        else 
            data_1_V_V_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    data_2_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, icmp_ln79_fu_121_p2, data_2_V_V_TVALID_int)
    begin
        if (((icmp_ln79_fu_121_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_2_V_V_TDATA_blk_n <= data_2_V_V_TVALID_int;
        else 
            data_2_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_2_V_V_TREADY_assign_proc : process(data_2_V_V_TVALID, regslice_both_data_2_V_V_U_ack_in)
    begin
        if (((regslice_both_data_2_V_V_U_ack_in = ap_const_logic_1) and (data_2_V_V_TVALID = ap_const_logic_1))) then 
            data_2_V_V_TREADY <= ap_const_logic_1;
        else 
            data_2_V_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    data_2_V_V_TREADY_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln79_fu_121_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln79_fu_121_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_2_V_V_TREADY_int <= ap_const_logic_1;
        else 
            data_2_V_V_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    data_3_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, icmp_ln79_fu_121_p2, data_3_V_V_TVALID_int)
    begin
        if (((icmp_ln79_fu_121_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_3_V_V_TDATA_blk_n <= data_3_V_V_TVALID_int;
        else 
            data_3_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_3_V_V_TREADY_assign_proc : process(data_3_V_V_TVALID, regslice_both_data_3_V_V_U_ack_in)
    begin
        if (((regslice_both_data_3_V_V_U_ack_in = ap_const_logic_1) and (data_3_V_V_TVALID = ap_const_logic_1))) then 
            data_3_V_V_TREADY <= ap_const_logic_1;
        else 
            data_3_V_V_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    data_3_V_V_TREADY_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln79_fu_121_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln79_fu_121_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_3_V_V_TREADY_int <= ap_const_logic_1;
        else 
            data_3_V_V_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_127_p2 <= std_logic_vector(unsigned(i_0_reg_110) + unsigned(ap_const_lv10_1));
    icmp_ln1494_1_fu_163_p2 <= "1" when (signed(data_1_V_V_TDATA_int) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1494_2_fu_177_p2 <= "1" when (signed(data_2_V_V_TDATA_int) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1494_3_fu_191_p2 <= "1" when (signed(data_3_V_V_TDATA_int) > signed(ap_const_lv16_0)) else "0";
    icmp_ln1494_fu_149_p2 <= "1" when (signed(data_0_V_V_TDATA_int) > signed(ap_const_lv16_0)) else "0";
    icmp_ln79_fu_121_p2 <= "1" when (i_0_reg_110 = ap_const_lv10_268) else "0";

    res_0_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln79_reg_221, ap_enable_reg_pp0_iter2, icmp_ln79_reg_221_pp0_iter1_reg, res_0_V_V_TREADY_int)
    begin
        if ((((icmp_ln79_reg_221_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((icmp_ln79_reg_221 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            res_0_V_V_TDATA_blk_n <= res_0_V_V_TREADY_int;
        else 
            res_0_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_0_V_V_TDATA_int <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_reg_230),16));
    res_0_V_V_TVALID <= regslice_both_res_0_V_V_U_vld_out;

    res_0_V_V_TVALID_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln79_reg_221, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln79_reg_221 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            res_0_V_V_TVALID_int <= ap_const_logic_1;
        else 
            res_0_V_V_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;


    res_1_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln79_reg_221, ap_enable_reg_pp0_iter2, icmp_ln79_reg_221_pp0_iter1_reg, res_1_V_V_TREADY_int)
    begin
        if ((((icmp_ln79_reg_221_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((icmp_ln79_reg_221 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            res_1_V_V_TDATA_blk_n <= res_1_V_V_TREADY_int;
        else 
            res_1_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_1_V_V_TDATA_int <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_2_reg_235),16));
    res_1_V_V_TVALID <= regslice_both_res_1_V_V_U_vld_out;

    res_1_V_V_TVALID_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln79_reg_221, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln79_reg_221 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            res_1_V_V_TVALID_int <= ap_const_logic_1;
        else 
            res_1_V_V_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;


    res_2_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln79_reg_221, ap_enable_reg_pp0_iter2, icmp_ln79_reg_221_pp0_iter1_reg, res_2_V_V_TREADY_int)
    begin
        if ((((icmp_ln79_reg_221_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((icmp_ln79_reg_221 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            res_2_V_V_TDATA_blk_n <= res_2_V_V_TREADY_int;
        else 
            res_2_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_2_V_V_TDATA_int <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_4_reg_240),16));
    res_2_V_V_TVALID <= regslice_both_res_2_V_V_U_vld_out;

    res_2_V_V_TVALID_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln79_reg_221, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln79_reg_221 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            res_2_V_V_TVALID_int <= ap_const_logic_1;
        else 
            res_2_V_V_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;


    res_3_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln79_reg_221, ap_enable_reg_pp0_iter2, icmp_ln79_reg_221_pp0_iter1_reg, res_3_V_V_TREADY_int)
    begin
        if ((((icmp_ln79_reg_221_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((icmp_ln79_reg_221 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            res_3_V_V_TDATA_blk_n <= res_3_V_V_TREADY_int;
        else 
            res_3_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    res_3_V_V_TDATA_int <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_6_reg_245),16));
    res_3_V_V_TVALID <= regslice_both_res_3_V_V_U_vld_out;

    res_3_V_V_TVALID_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln79_reg_221, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln79_reg_221 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            res_3_V_V_TVALID_int <= ap_const_logic_1;
        else 
            res_3_V_V_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    tmp_V_2_fu_169_p3 <= 
        trunc_ln203_1_fu_137_p1 when (icmp_ln1494_1_fu_163_p2(0) = '1') else 
        ap_const_lv15_0;
    tmp_V_4_fu_183_p3 <= 
        trunc_ln203_2_fu_141_p1 when (icmp_ln1494_2_fu_177_p2(0) = '1') else 
        ap_const_lv15_0;
    tmp_V_6_fu_197_p3 <= 
        trunc_ln203_3_fu_145_p1 when (icmp_ln1494_3_fu_191_p2(0) = '1') else 
        ap_const_lv15_0;
    tmp_V_fu_155_p3 <= 
        trunc_ln203_fu_133_p1 when (icmp_ln1494_fu_149_p2(0) = '1') else 
        ap_const_lv15_0;
    trunc_ln203_1_fu_137_p1 <= data_1_V_V_TDATA_int(15 - 1 downto 0);
    trunc_ln203_2_fu_141_p1 <= data_2_V_V_TDATA_int(15 - 1 downto 0);
    trunc_ln203_3_fu_145_p1 <= data_3_V_V_TDATA_int(15 - 1 downto 0);
    trunc_ln203_fu_133_p1 <= data_0_V_V_TDATA_int(15 - 1 downto 0);
end behav;
