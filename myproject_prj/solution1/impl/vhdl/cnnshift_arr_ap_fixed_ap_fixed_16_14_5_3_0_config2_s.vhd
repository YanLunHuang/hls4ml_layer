-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_V_read : IN STD_LOGIC_VECTOR (127 downto 0);
    output_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_V_ce0 : OUT STD_LOGIC;
    output_V_we0 : OUT STD_LOGIC;
    output_V_d0 : OUT STD_LOGIC_VECTOR (127 downto 0);
    output_V_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
    output_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_V_ce1 : OUT STD_LOGIC;
    output_V_we1 : OUT STD_LOGIC;
    output_V_d1 : OUT STD_LOGIC_VECTOR (127 downto 0);
    output_V_q1 : IN STD_LOGIC_VECTOR (127 downto 0) );
end;


architecture behav of cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal layer_in_row_Array_V_0_0_ce0 : STD_LOGIC;
    signal layer_in_row_Array_V_0_0_we0 : STD_LOGIC;
    signal layer_in_row_Array_V_0_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer_in_row_Array_V_1_0_ce0 : STD_LOGIC;
    signal layer_in_row_Array_V_1_0_we0 : STD_LOGIC;
    signal layer_in_row_Array_V_1_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer_in_row_Array_V_0_1_ce0 : STD_LOGIC;
    signal layer_in_row_Array_V_0_1_we0 : STD_LOGIC;
    signal layer_in_row_Array_V_0_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer_in_row_Array_V_1_1_ce0 : STD_LOGIC;
    signal layer_in_row_Array_V_1_1_we0 : STD_LOGIC;
    signal layer_in_row_Array_V_1_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer_in_row_Array_V_0_2_ce0 : STD_LOGIC;
    signal layer_in_row_Array_V_0_2_we0 : STD_LOGIC;
    signal layer_in_row_Array_V_0_2_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer_in_row_Array_V_1_2_ce0 : STD_LOGIC;
    signal layer_in_row_Array_V_1_2_we0 : STD_LOGIC;
    signal layer_in_row_Array_V_1_2_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer_in_row_Array_V_0_3_ce0 : STD_LOGIC;
    signal layer_in_row_Array_V_0_3_we0 : STD_LOGIC;
    signal layer_in_row_Array_V_0_3_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer_in_row_Array_V_0_3_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer_in_row_Array_V_1_3_ce0 : STD_LOGIC;
    signal layer_in_row_Array_V_1_3_we0 : STD_LOGIC;
    signal layer_in_row_Array_V_1_3_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer_in_row_Array_V_0_4_ce0 : STD_LOGIC;
    signal layer_in_row_Array_V_0_4_we0 : STD_LOGIC;
    signal layer_in_row_Array_V_0_4_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer_in_row_Array_V_1_4_ce0 : STD_LOGIC;
    signal layer_in_row_Array_V_1_4_we0 : STD_LOGIC;
    signal layer_in_row_Array_V_1_4_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer_in_row_Array_V_0_5_ce0 : STD_LOGIC;
    signal layer_in_row_Array_V_0_5_we0 : STD_LOGIC;
    signal layer_in_row_Array_V_0_5_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer_in_row_Array_V_1_5_ce0 : STD_LOGIC;
    signal layer_in_row_Array_V_1_5_we0 : STD_LOGIC;
    signal layer_in_row_Array_V_1_5_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer_in_row_Array_V_0_6_ce0 : STD_LOGIC;
    signal layer_in_row_Array_V_0_6_we0 : STD_LOGIC;
    signal layer_in_row_Array_V_0_6_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer_in_row_Array_V_0_6_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer_in_row_Array_V_1_6_ce0 : STD_LOGIC;
    signal layer_in_row_Array_V_1_6_we0 : STD_LOGIC;
    signal layer_in_row_Array_V_1_6_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer_in_row_Array_V_0_7_ce0 : STD_LOGIC;
    signal layer_in_row_Array_V_0_7_we0 : STD_LOGIC;
    signal layer_in_row_Array_V_0_7_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer_in_row_Array_V_1_7_ce0 : STD_LOGIC;
    signal layer_in_row_Array_V_1_7_we0 : STD_LOGIC;
    signal layer_in_row_Array_V_1_7_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_244_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_304 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_274_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_308 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal trunc_ln203_fu_312_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln203_reg_764 : STD_LOGIC_VECTOR (15 downto 0);
    signal DataIn_V_assign_2_reg_769 : STD_LOGIC_VECTOR (15 downto 0);
    signal DataIn_V_assign_4_reg_775 : STD_LOGIC_VECTOR (15 downto 0);
    signal DataIn_V_assign_6_reg_781 : STD_LOGIC_VECTOR (15 downto 0);
    signal DataOut_V_7_reg_786 : STD_LOGIC_VECTOR (15 downto 0);
    signal DataIn_V_assign_8_reg_791 : STD_LOGIC_VECTOR (15 downto 0);
    signal DataIn_V_assign_s_reg_797 : STD_LOGIC_VECTOR (15 downto 0);
    signal DataIn_V_assign_1_reg_803 : STD_LOGIC_VECTOR (15 downto 0);
    signal DataOut_V_12_reg_808 : STD_LOGIC_VECTOR (15 downto 0);
    signal DataIn_V_assign_3_reg_813 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_reg_830 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln203_1_fu_436_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln203_1_reg_835 : STD_LOGIC_VECTOR (31 downto 0);
    signal DataOut_V_10_reg_840 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_22_reg_856 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_reg_861 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_264_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_866 : STD_LOGIC_VECTOR (31 downto 0);
    signal DataOut_V_3_reg_871 : STD_LOGIC_VECTOR (15 downto 0);
    signal DataOut_V_14_reg_876 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_18_reg_892 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_254_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_reg_897 : STD_LOGIC_VECTOR (31 downto 0);
    signal DataOut_V_1_reg_902 : STD_LOGIC_VECTOR (15 downto 0);
    signal DataOut_V_5_reg_907 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_14_reg_917 : STD_LOGIC_VECTOR (63 downto 0);
    signal DataOut_V_9_reg_922 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_284_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_20_reg_927 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_294_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_reg_932 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_port_reg_data_V_read : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_24_fu_450_p7 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_26_fu_516_p5 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_28_fu_576_p7 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_23_fu_630_p6 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_30_fu_652_p7 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_25_fu_695_p7 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_27_fu_707_p7 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_29_fu_729_p5 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_32_fu_739_p7 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_19_fu_416_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_fu_440_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_506_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_fu_566_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_layebkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    layer_in_row_Array_V_0_0_U : component cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_layebkb
    generic map (
        DataWidth => 16,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv3_4,
        ce0 => layer_in_row_Array_V_0_0_ce0,
        we0 => layer_in_row_Array_V_0_0_we0,
        d0 => trunc_ln203_reg_764,
        q0 => layer_in_row_Array_V_0_0_q0);

    layer_in_row_Array_V_1_0_U : component cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_layebkb
    generic map (
        DataWidth => 16,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv3_4,
        ce0 => layer_in_row_Array_V_1_0_ce0,
        we0 => layer_in_row_Array_V_1_0_we0,
        d0 => layer_in_row_Array_V_0_0_q0,
        q0 => layer_in_row_Array_V_1_0_q0);

    layer_in_row_Array_V_0_1_U : component cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_layebkb
    generic map (
        DataWidth => 16,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv3_4,
        ce0 => layer_in_row_Array_V_0_1_ce0,
        we0 => layer_in_row_Array_V_0_1_we0,
        d0 => DataIn_V_assign_2_reg_769,
        q0 => layer_in_row_Array_V_0_1_q0);

    layer_in_row_Array_V_1_1_U : component cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_layebkb
    generic map (
        DataWidth => 16,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv3_4,
        ce0 => layer_in_row_Array_V_1_1_ce0,
        we0 => layer_in_row_Array_V_1_1_we0,
        d0 => DataOut_V_3_reg_871,
        q0 => layer_in_row_Array_V_1_1_q0);

    layer_in_row_Array_V_0_2_U : component cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_layebkb
    generic map (
        DataWidth => 16,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv3_4,
        ce0 => layer_in_row_Array_V_0_2_ce0,
        we0 => layer_in_row_Array_V_0_2_we0,
        d0 => DataIn_V_assign_4_reg_775,
        q0 => layer_in_row_Array_V_0_2_q0);

    layer_in_row_Array_V_1_2_U : component cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_layebkb
    generic map (
        DataWidth => 16,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv3_4,
        ce0 => layer_in_row_Array_V_1_2_ce0,
        we0 => layer_in_row_Array_V_1_2_we0,
        d0 => layer_in_row_Array_V_0_2_q0,
        q0 => layer_in_row_Array_V_1_2_q0);

    layer_in_row_Array_V_0_3_U : component cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_layebkb
    generic map (
        DataWidth => 16,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv3_4,
        ce0 => layer_in_row_Array_V_0_3_ce0,
        we0 => layer_in_row_Array_V_0_3_we0,
        d0 => layer_in_row_Array_V_0_3_d0,
        q0 => layer_in_row_Array_V_0_3_q0);

    layer_in_row_Array_V_1_3_U : component cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_layebkb
    generic map (
        DataWidth => 16,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv3_4,
        ce0 => layer_in_row_Array_V_1_3_ce0,
        we0 => layer_in_row_Array_V_1_3_we0,
        d0 => layer_in_row_Array_V_0_3_q0,
        q0 => layer_in_row_Array_V_1_3_q0);

    layer_in_row_Array_V_0_4_U : component cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_layebkb
    generic map (
        DataWidth => 16,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv3_4,
        ce0 => layer_in_row_Array_V_0_4_ce0,
        we0 => layer_in_row_Array_V_0_4_we0,
        d0 => DataIn_V_assign_8_reg_791,
        q0 => layer_in_row_Array_V_0_4_q0);

    layer_in_row_Array_V_1_4_U : component cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_layebkb
    generic map (
        DataWidth => 16,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv3_4,
        ce0 => layer_in_row_Array_V_1_4_ce0,
        we0 => layer_in_row_Array_V_1_4_we0,
        d0 => layer_in_row_Array_V_0_4_q0,
        q0 => layer_in_row_Array_V_1_4_q0);

    layer_in_row_Array_V_0_5_U : component cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_layebkb
    generic map (
        DataWidth => 16,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv3_4,
        ce0 => layer_in_row_Array_V_0_5_ce0,
        we0 => layer_in_row_Array_V_0_5_we0,
        d0 => DataIn_V_assign_s_reg_797,
        q0 => layer_in_row_Array_V_0_5_q0);

    layer_in_row_Array_V_1_5_U : component cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_layebkb
    generic map (
        DataWidth => 16,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv3_4,
        ce0 => layer_in_row_Array_V_1_5_ce0,
        we0 => layer_in_row_Array_V_1_5_we0,
        d0 => layer_in_row_Array_V_0_5_q0,
        q0 => layer_in_row_Array_V_1_5_q0);

    layer_in_row_Array_V_0_6_U : component cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_layebkb
    generic map (
        DataWidth => 16,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv3_4,
        ce0 => layer_in_row_Array_V_0_6_ce0,
        we0 => layer_in_row_Array_V_0_6_we0,
        d0 => layer_in_row_Array_V_0_6_d0,
        q0 => layer_in_row_Array_V_0_6_q0);

    layer_in_row_Array_V_1_6_U : component cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_layebkb
    generic map (
        DataWidth => 16,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv3_4,
        ce0 => layer_in_row_Array_V_1_6_ce0,
        we0 => layer_in_row_Array_V_1_6_we0,
        d0 => DataOut_V_12_reg_808,
        q0 => layer_in_row_Array_V_1_6_q0);

    layer_in_row_Array_V_0_7_U : component cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_layebkb
    generic map (
        DataWidth => 16,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv3_4,
        ce0 => layer_in_row_Array_V_0_7_ce0,
        we0 => layer_in_row_Array_V_0_7_we0,
        d0 => DataIn_V_assign_3_reg_813,
        q0 => layer_in_row_Array_V_0_7_q0);

    layer_in_row_Array_V_1_7_U : component cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_layebkb
    generic map (
        DataWidth => 16,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => ap_const_lv3_4,
        ce0 => layer_in_row_Array_V_1_7_ce0,
        we0 => layer_in_row_Array_V_1_7_we0,
        d0 => layer_in_row_Array_V_0_7_q0,
        q0 => layer_in_row_Array_V_1_7_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                DataIn_V_assign_1_reg_803 <= ap_port_reg_data_V_read(111 downto 96);
                DataIn_V_assign_2_reg_769 <= ap_port_reg_data_V_read(31 downto 16);
                DataIn_V_assign_3_reg_813 <= ap_port_reg_data_V_read(127 downto 112);
                DataIn_V_assign_4_reg_775 <= ap_port_reg_data_V_read(47 downto 32);
                DataIn_V_assign_6_reg_781 <= ap_port_reg_data_V_read(63 downto 48);
                DataIn_V_assign_8_reg_791 <= ap_port_reg_data_V_read(79 downto 64);
                DataIn_V_assign_s_reg_797 <= ap_port_reg_data_V_read(95 downto 80);
                DataOut_V_12_reg_808 <= layer_in_row_Array_V_0_6_q0;
                DataOut_V_7_reg_786 <= layer_in_row_Array_V_0_3_q0;
                tmp_1_reg_830 <= output_V_q0(79 downto 48);
                trunc_ln203_1_reg_835 <= trunc_ln203_1_fu_436_p1;
                trunc_ln203_reg_764 <= trunc_ln203_fu_312_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                DataOut_V_10_reg_840 <= layer_in_row_Array_V_0_5_q0;
                tmp_22_reg_856 <= output_V_q0(127 downto 112);
                tmp_5_reg_861 <= output_V_q0(95 downto 64);
                tmp_6_reg_866 <= output_V_q0(47 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                DataOut_V_14_reg_876 <= layer_in_row_Array_V_0_7_q0;
                DataOut_V_3_reg_871 <= layer_in_row_Array_V_0_1_q0;
                tmp_10_reg_897 <= output_V_q1(47 downto 16);
                tmp_18_reg_892 <= output_V_q1(79 downto 64);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                DataOut_V_1_reg_902 <= layer_in_row_Array_V_0_0_q0;
                DataOut_V_5_reg_907 <= layer_in_row_Array_V_0_2_q0;
                tmp_14_reg_917 <= output_V_q0(79 downto 16);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                DataOut_V_9_reg_922 <= layer_in_row_Array_V_0_4_q0;
                tmp_20_reg_927 <= output_V_q1(31 downto 16);
                tmp_31_reg_932 <= output_V_q1(79 downto 48);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                ap_port_reg_data_V_read <= data_V_read;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2))) then
                reg_304 <= output_V_q0(127 downto 96);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4))) then
                reg_308 <= output_V_q1(127 downto 96);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_244_p4 <= output_V_q0(127 downto 96);
    grp_fu_254_p4 <= output_V_q1(47 downto 16);
    grp_fu_264_p4 <= output_V_q0(47 downto 16);
    grp_fu_274_p4 <= output_V_q1(127 downto 96);
    grp_fu_284_p4 <= output_V_q1(31 downto 16);
    grp_fu_294_p4 <= output_V_q1(79 downto 48);

    layer_in_row_Array_V_0_0_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            layer_in_row_Array_V_0_0_ce0 <= ap_const_logic_1;
        else 
            layer_in_row_Array_V_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_in_row_Array_V_0_0_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            layer_in_row_Array_V_0_0_we0 <= ap_const_logic_1;
        else 
            layer_in_row_Array_V_0_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_in_row_Array_V_0_1_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            layer_in_row_Array_V_0_1_ce0 <= ap_const_logic_1;
        else 
            layer_in_row_Array_V_0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_in_row_Array_V_0_1_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            layer_in_row_Array_V_0_1_we0 <= ap_const_logic_1;
        else 
            layer_in_row_Array_V_0_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_in_row_Array_V_0_2_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            layer_in_row_Array_V_0_2_ce0 <= ap_const_logic_1;
        else 
            layer_in_row_Array_V_0_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_in_row_Array_V_0_2_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            layer_in_row_Array_V_0_2_we0 <= ap_const_logic_1;
        else 
            layer_in_row_Array_V_0_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_in_row_Array_V_0_3_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            layer_in_row_Array_V_0_3_ce0 <= ap_const_logic_1;
        else 
            layer_in_row_Array_V_0_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer_in_row_Array_V_0_3_d0 <= ap_port_reg_data_V_read(63 downto 48);

    layer_in_row_Array_V_0_3_we0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            layer_in_row_Array_V_0_3_we0 <= ap_const_logic_1;
        else 
            layer_in_row_Array_V_0_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_in_row_Array_V_0_4_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            layer_in_row_Array_V_0_4_ce0 <= ap_const_logic_1;
        else 
            layer_in_row_Array_V_0_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_in_row_Array_V_0_4_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            layer_in_row_Array_V_0_4_we0 <= ap_const_logic_1;
        else 
            layer_in_row_Array_V_0_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_in_row_Array_V_0_5_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            layer_in_row_Array_V_0_5_ce0 <= ap_const_logic_1;
        else 
            layer_in_row_Array_V_0_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_in_row_Array_V_0_5_we0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            layer_in_row_Array_V_0_5_we0 <= ap_const_logic_1;
        else 
            layer_in_row_Array_V_0_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_in_row_Array_V_0_6_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            layer_in_row_Array_V_0_6_ce0 <= ap_const_logic_1;
        else 
            layer_in_row_Array_V_0_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer_in_row_Array_V_0_6_d0 <= ap_port_reg_data_V_read(111 downto 96);

    layer_in_row_Array_V_0_6_we0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            layer_in_row_Array_V_0_6_we0 <= ap_const_logic_1;
        else 
            layer_in_row_Array_V_0_6_we0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_in_row_Array_V_0_7_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            layer_in_row_Array_V_0_7_ce0 <= ap_const_logic_1;
        else 
            layer_in_row_Array_V_0_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_in_row_Array_V_0_7_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            layer_in_row_Array_V_0_7_we0 <= ap_const_logic_1;
        else 
            layer_in_row_Array_V_0_7_we0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_in_row_Array_V_1_0_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            layer_in_row_Array_V_1_0_ce0 <= ap_const_logic_1;
        else 
            layer_in_row_Array_V_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_in_row_Array_V_1_0_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            layer_in_row_Array_V_1_0_we0 <= ap_const_logic_1;
        else 
            layer_in_row_Array_V_1_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_in_row_Array_V_1_1_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            layer_in_row_Array_V_1_1_ce0 <= ap_const_logic_1;
        else 
            layer_in_row_Array_V_1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_in_row_Array_V_1_1_we0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            layer_in_row_Array_V_1_1_we0 <= ap_const_logic_1;
        else 
            layer_in_row_Array_V_1_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_in_row_Array_V_1_2_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            layer_in_row_Array_V_1_2_ce0 <= ap_const_logic_1;
        else 
            layer_in_row_Array_V_1_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_in_row_Array_V_1_2_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            layer_in_row_Array_V_1_2_we0 <= ap_const_logic_1;
        else 
            layer_in_row_Array_V_1_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_in_row_Array_V_1_3_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            layer_in_row_Array_V_1_3_ce0 <= ap_const_logic_1;
        else 
            layer_in_row_Array_V_1_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_in_row_Array_V_1_3_we0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            layer_in_row_Array_V_1_3_we0 <= ap_const_logic_1;
        else 
            layer_in_row_Array_V_1_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_in_row_Array_V_1_4_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            layer_in_row_Array_V_1_4_ce0 <= ap_const_logic_1;
        else 
            layer_in_row_Array_V_1_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_in_row_Array_V_1_4_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            layer_in_row_Array_V_1_4_we0 <= ap_const_logic_1;
        else 
            layer_in_row_Array_V_1_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_in_row_Array_V_1_5_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            layer_in_row_Array_V_1_5_ce0 <= ap_const_logic_1;
        else 
            layer_in_row_Array_V_1_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_in_row_Array_V_1_5_we0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            layer_in_row_Array_V_1_5_we0 <= ap_const_logic_1;
        else 
            layer_in_row_Array_V_1_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_in_row_Array_V_1_6_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            layer_in_row_Array_V_1_6_ce0 <= ap_const_logic_1;
        else 
            layer_in_row_Array_V_1_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_in_row_Array_V_1_6_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            layer_in_row_Array_V_1_6_we0 <= ap_const_logic_1;
        else 
            layer_in_row_Array_V_1_6_we0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_in_row_Array_V_1_7_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            layer_in_row_Array_V_1_7_ce0 <= ap_const_logic_1;
        else 
            layer_in_row_Array_V_1_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_in_row_Array_V_1_7_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            layer_in_row_Array_V_1_7_we0 <= ap_const_logic_1;
        else 
            layer_in_row_Array_V_1_7_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_V_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state3, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_V_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_V_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_V_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output_V_address0 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_V_address0 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_V_address0 <= ap_const_lv64_1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            output_V_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        else 
            output_V_address0 <= "XXXX";
        end if; 
    end process;


    output_V_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state3, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_V_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_V_address1 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_V_address1 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output_V_address1 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_V_address1 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_V_address1 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            output_V_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            output_V_address1 <= "XXXX";
        end if; 
    end process;


    output_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state3, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            output_V_ce0 <= ap_const_logic_1;
        else 
            output_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_V_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state3, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            output_V_ce1 <= ap_const_logic_1;
        else 
            output_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_V_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state4, ap_CS_fsm_state6, tmp_24_fu_450_p7, tmp_28_fu_576_p7, tmp_23_fu_630_p6, tmp_25_fu_695_p7, ap_CS_fsm_state7, tmp_29_fu_729_p5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_V_d0 <= tmp_29_fu_729_p5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_V_d0 <= tmp_25_fu_695_p7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_V_d0 <= tmp_23_fu_630_p6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output_V_d0 <= tmp_28_fu_576_p7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_V_d0 <= tmp_24_fu_450_p7;
        else 
            output_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_V_d1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state3, tmp_26_fu_516_p5, tmp_30_fu_652_p7, tmp_27_fu_707_p7, ap_CS_fsm_state7, tmp_32_fu_739_p7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_V_d1 <= tmp_32_fu_739_p7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            output_V_d1 <= tmp_27_fu_707_p7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_V_d1 <= tmp_30_fu_652_p7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            output_V_d1 <= tmp_26_fu_516_p5;
        else 
            output_V_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_V_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            output_V_we0 <= ap_const_logic_1;
        else 
            output_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_V_we1_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state3, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            output_V_we1 <= ap_const_logic_1;
        else 
            output_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_19_fu_416_p4 <= output_V_q1(127 downto 112);
    tmp_21_fu_566_p4 <= output_V_q0(79 downto 64);
    tmp_23_fu_630_p6 <= ((((reg_304 & DataOut_V_10_reg_840) & tmp_1_reg_830) & layer_in_row_Array_V_1_2_q0) & trunc_ln203_1_reg_835);
    tmp_24_fu_450_p7 <= (((((trunc_ln203_fu_312_p1 & tmp_19_fu_416_p4) & layer_in_row_Array_V_0_6_q0) & tmp_3_fu_440_p4) & layer_in_row_Array_V_1_3_q0) & grp_fu_254_p4);
    tmp_25_fu_695_p7 <= (((((DataIn_V_assign_2_reg_769 & tmp_22_reg_856) & DataOut_V_14_reg_876) & tmp_5_reg_861) & layer_in_row_Array_V_1_4_q0) & tmp_6_reg_866);
    tmp_26_fu_516_p5 <= (((DataIn_V_assign_4_reg_775 & tmp_7_fu_506_p4) & layer_in_row_Array_V_1_5_q0) & grp_fu_254_p4);
    tmp_27_fu_707_p7 <= (((((DataIn_V_assign_6_reg_781 & reg_308) & DataOut_V_1_reg_902) & tmp_18_reg_892) & layer_in_row_Array_V_1_6_q0) & tmp_10_reg_897);
    tmp_28_fu_576_p7 <= (((((DataIn_V_assign_8_reg_791 & grp_fu_244_p4) & layer_in_row_Array_V_0_1_q0) & tmp_21_fu_566_p4) & layer_in_row_Array_V_1_7_q0) & grp_fu_264_p4);
    tmp_29_fu_729_p5 <= (((DataIn_V_assign_s_reg_797 & reg_304) & DataOut_V_5_reg_907) & tmp_14_reg_917);
    tmp_30_fu_652_p7 <= (((((DataIn_V_assign_1_reg_803 & grp_fu_274_p4) & DataOut_V_7_reg_786) & grp_fu_294_p4) & layer_in_row_Array_V_1_0_q0) & grp_fu_284_p4);
    tmp_32_fu_739_p7 <= (((((DataIn_V_assign_3_reg_813 & reg_308) & DataOut_V_9_reg_922) & tmp_31_reg_932) & layer_in_row_Array_V_1_1_q0) & tmp_20_reg_927);
    tmp_3_fu_440_p4 <= output_V_q1(95 downto 64);
    tmp_7_fu_506_p4 <= output_V_q1(127 downto 64);
    trunc_ln203_1_fu_436_p1 <= output_V_q0(32 - 1 downto 0);
    trunc_ln203_fu_312_p1 <= ap_port_reg_data_V_read(16 - 1 downto 0);
end behav;
