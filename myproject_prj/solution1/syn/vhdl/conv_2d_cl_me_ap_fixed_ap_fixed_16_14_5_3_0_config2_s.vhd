-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_2d_cl_me_ap_fixed_ap_fixed_16_14_5_3_0_config2_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    data_V_V_empty_n : IN STD_LOGIC;
    data_V_V_read : OUT STD_LOGIC;
    res_V_V_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    res_V_V_TVALID : OUT STD_LOGIC;
    res_V_V_TREADY : IN STD_LOGIC;
    weights_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    weights_V_ce0 : OUT STD_LOGIC;
    weights_V_q0 : IN STD_LOGIC_VECTOR (127 downto 0) );
end;


architecture behav of conv_2d_cl_me_ap_fixed_ap_fixed_16_14_5_3_0_config2_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000001000000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000010000000000000000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000100000000000000000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000001000000000000000000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000010000000000000000000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000100000000000000000000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (32 downto 0) := "000000000001000000000000000000000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (32 downto 0) := "000000000010000000000000000000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (32 downto 0) := "000000000100000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (32 downto 0) := "000000001000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (32 downto 0) := "000000010000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (32 downto 0) := "000000100000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (32 downto 0) := "000001000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (32 downto 0) := "000010000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (32 downto 0) := "000100000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (32 downto 0) := "001000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (32 downto 0) := "010000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (32 downto 0) := "100000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv7_48 : STD_LOGIC_VECTOR (6 downto 0) := "1001000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_F : STD_LOGIC_VECTOR (6 downto 0) := "0001111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv128_lc_2 : STD_LOGIC_VECTOR (127 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv7_9 : STD_LOGIC_VECTOR (6 downto 0) := "0001001";
    constant ap_const_lv15_E4 : STD_LOGIC_VECTOR (14 downto 0) := "000000011100100";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal layer_in_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal layer_in_V_ce0 : STD_LOGIC;
    signal layer_in_V_we0 : STD_LOGIC;
    signal layer_in_V_q0 : STD_LOGIC_VECTOR (127 downto 0);
    signal layer_in_V_ce1 : STD_LOGIC;
    signal layer_in_V_we1 : STD_LOGIC;
    signal layer_in_V_q1 : STD_LOGIC_VECTOR (127 downto 0);
    signal sX : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sY : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal pY : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal pX : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal data_V_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln157_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal res_V_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal and_ln166_2_reg_1026 : STD_LOGIC_VECTOR (0 downto 0);
    signal layer_out_i_1_reg_230 : STD_LOGIC_VECTOR (127 downto 0);
    signal i_in_0_i_i_reg_242 : STD_LOGIC_VECTOR (6 downto 0);
    signal phi_mul_reg_253 : STD_LOGIC_VECTOR (14 downto 0);
    signal phi_urem_reg_265 : STD_LOGIC_VECTOR (6 downto 0);
    signal reg_402 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state19_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal icmp_ln291_reg_1030 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_407 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_412 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_417 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_422 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_427 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_432 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_fu_443_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_944 : STD_LOGIC_VECTOR (4 downto 0);
    signal regslice_both_res_V_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state2 : BOOLEAN;
    signal tmp_V_reg_949 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_8_reg_954 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_9_reg_959 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_10_reg_964 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_11_reg_969 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_12_reg_974 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_13_reg_979 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_14_reg_984 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal sX_load_reg_994 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal icmp_ln166_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln166_reg_999 : STD_LOGIC_VECTOR (0 downto 0);
    signal sY_load_reg_1004 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln166_1_fu_476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln166_1_reg_1009 : STD_LOGIC_VECTOR (0 downto 0);
    signal pY_load_reg_1014 : STD_LOGIC_VECTOR (31 downto 0);
    signal pX_load_reg_1020 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln166_2_fu_534_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln291_fu_540_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state17_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln291_reg_1030_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_in_fu_546_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_in_reg_1034 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln291_1_fu_552_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln291_1_reg_1039 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_18_reg_1050 : STD_LOGIC_VECTOR (2 downto 0);
    signal sub_ln293_2_fu_657_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln293_2_reg_1060 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state18_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state26_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal lshr_ln293_fu_667_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln293_reg_1065 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln299_fu_673_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln299_reg_1070 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_reg_1075 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_reg_1080 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_reg_1085 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_reg_1090 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_11_reg_1095 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_13_reg_1100 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_15_reg_1105 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmpt_V_fu_761_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmpt_V_reg_1110 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_fu_770_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_reg_1115 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_1_fu_776_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_1_reg_1120 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state20_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal add_ln703_2_fu_782_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_2_reg_1125 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state21_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal add_ln703_3_fu_788_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_3_reg_1130 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state22_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal add_ln703_4_fu_794_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_4_reg_1135 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_state23_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal select_ln291_fu_805_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln291_reg_1140 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_state24_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal add_ln293_fu_812_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln293_reg_1145 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln703_5_fu_818_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_5_reg_1150 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_6_fu_824_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_6_reg_1155 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_17_fu_836_p9 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal tmp_V_15_fu_849_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state17 : STD_LOGIC;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_ap_start : STD_LOGIC;
    signal grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_ap_done : STD_LOGIC;
    signal grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_ap_idle : STD_LOGIC;
    signal grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_ap_ready : STD_LOGIC;
    signal grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_data_V_read : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_output_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_output_V_ce0 : STD_LOGIC;
    signal grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_output_V_we0 : STD_LOGIC;
    signal grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_output_V_d0 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_output_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_output_V_ce1 : STD_LOGIC;
    signal grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_output_V_we1 : STD_LOGIC;
    signal grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_output_V_d1 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_325_ap_ready : STD_LOGIC;
    signal grp_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_325_a_V : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_325_w_V : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_325_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal i_0_i_reg_219 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_state35_io : BOOLEAN;
    signal ap_phi_mux_layer_out_i_1_phi_fu_234_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_phi_mux_i_in_0_i_i_phi_fu_246_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_phi_mul_phi_fu_257_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_phi_mux_phi_urem_phi_fu_269_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln197_fu_921_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_storemerge_i_phi_fu_279_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln187_fu_854_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln191_fu_900_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (32 downto 0);
    signal ap_NS_fsm_state10 : STD_LOGIC;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln293_fu_558_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln299_fu_573_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln202_fu_875_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln195_fu_905_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln200_fu_859_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_331_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_fu_342_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_fu_352_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_fu_362_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_fu_372_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_fu_382_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_fu_392_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_1_fu_486_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_2_fu_506_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln166_2_fu_496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln166_3_fu_516_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln166_1_fu_528_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln166_fu_522_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_578_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_19_fu_585_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln293_1_fu_597_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln293_2_fu_601_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln293_fu_591_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln293_fu_615_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln293_1_fu_627_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_20_fu_605_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal xor_ln293_fu_621_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln293_fu_633_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln293_2_fu_649_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln293_1_fu_641_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln293_3_fu_663_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal zext_ln293_4_fu_747_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal lshr_ln293_1_fu_750_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal and_ln293_fu_756_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal trunc_ln1265_fu_766_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln291_1_fu_800_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln703_7_fu_830_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln202_fu_870_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln197_fu_916_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal res_V_V_TDATA_int : STD_LOGIC_VECTOR (15 downto 0);
    signal res_V_V_TVALID_int : STD_LOGIC;
    signal res_V_V_TREADY_int : STD_LOGIC;
    signal regslice_both_res_V_V_U_vld_out : STD_LOGIC;
    signal ap_condition_621 : BOOLEAN;

    component cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_V_read : IN STD_LOGIC_VECTOR (127 downto 0);
        output_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_V_ce0 : OUT STD_LOGIC;
        output_V_we0 : OUT STD_LOGIC;
        output_V_d0 : OUT STD_LOGIC_VECTOR (127 downto 0);
        output_V_q0 : IN STD_LOGIC_VECTOR (127 downto 0);
        output_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_V_ce1 : OUT STD_LOGIC;
        output_V_we1 : OUT STD_LOGIC;
        output_V_d1 : OUT STD_LOGIC_VECTOR (127 downto 0);
        output_V_q1 : IN STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component product_dense_ap_fixed_ap_fixed_ap_fixed_s IS
    port (
        ap_ready : OUT STD_LOGIC;
        a_V : IN STD_LOGIC_VECTOR (15 downto 0);
        w_V : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component conv_2d_cl_me_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_layrcU IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (127 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (127 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (127 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    layer_in_V_U : component conv_2d_cl_me_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_layrcU
    generic map (
        DataWidth => 128,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer_in_V_address0,
        ce0 => layer_in_V_ce0,
        we0 => layer_in_V_we0,
        d0 => grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_output_V_d0,
        q0 => layer_in_V_q0,
        address1 => grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_output_V_address1,
        ce1 => layer_in_V_ce1,
        we1 => layer_in_V_we1,
        d1 => grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_output_V_d1,
        q1 => layer_in_V_q1);

    grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286 : component cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_ap_start,
        ap_done => grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_ap_done,
        ap_idle => grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_ap_idle,
        ap_ready => grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_ap_ready,
        data_V_read => grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_data_V_read,
        output_V_address0 => grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_output_V_address0,
        output_V_ce0 => grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_output_V_ce0,
        output_V_we0 => grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_output_V_we0,
        output_V_d0 => grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_output_V_d0,
        output_V_q0 => layer_in_V_q0,
        output_V_address1 => grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_output_V_address1,
        output_V_ce1 => grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_output_V_ce1,
        output_V_we1 => grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_output_V_we1,
        output_V_d1 => grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_output_V_d1,
        output_V_q1 => layer_in_V_q1);

    grp_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_325 : component product_dense_ap_fixed_ap_fixed_ap_fixed_s
    port map (
        ap_ready => grp_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_325_ap_ready,
        a_V => grp_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_325_a_V,
        w_V => grp_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_325_w_V,
        ap_return => grp_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_325_ap_return);

    regslice_both_res_V_V_U : component regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => res_V_V_TDATA_int,
        vld_in => res_V_V_TVALID_int,
        ack_in => res_V_V_TREADY_int,
        data_out => res_V_V_TDATA,
        vld_out => regslice_both_res_V_V_U_vld_out,
        ack_out => res_V_V_TREADY,
        apdone_blk => regslice_both_res_V_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((regslice_both_res_V_V_U_apdone_blk = ap_const_logic_1) or ((icmp_ln157_fu_437_p2 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0)))) and (icmp_ln157_fu_437_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state17) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_1 = and_ln166_2_fu_534_p2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage7_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_1 = and_ln166_2_fu_534_p2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state10) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                    grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_ap_ready = ap_const_logic_1)) then 
                    grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i_reg_219_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state35_io) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
                i_0_i_reg_219 <= i_reg_944;
            elsif ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_i_reg_219 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_in_0_i_i_reg_242_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln291_reg_1030 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_in_0_i_i_reg_242 <= i_in_reg_1034;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_1 = and_ln166_2_fu_534_p2))) then 
                i_in_0_i_i_reg_242 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    layer_out_i_1_reg_230_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln291_reg_1030_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                layer_out_i_1_reg_230 <= tmp_17_fu_836_p9;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_1 = and_ln166_2_fu_534_p2))) then 
                layer_out_i_1_reg_230 <= ap_const_lv128_lc_1;
            end if; 
        end if;
    end process;

    pX_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state35_io) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                if ((icmp_ln187_fu_854_p2 = ap_const_lv1_1)) then 
                    pX <= ap_const_lv32_0;
                elsif ((icmp_ln187_fu_854_p2 = ap_const_lv1_0)) then 
                    pX <= add_ln200_fu_859_p2;
                end if;
            end if; 
        end if;
    end process;

    pY_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_621)) then
                if ((icmp_ln191_fu_900_p2 = ap_const_lv1_1)) then 
                    pY <= ap_const_lv32_0;
                elsif ((icmp_ln191_fu_900_p2 = ap_const_lv1_0)) then 
                    pY <= add_ln195_fu_905_p2;
                end if;
            end if; 
        end if;
    end process;

    phi_mul_reg_253_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln291_reg_1030 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                phi_mul_reg_253 <= add_ln293_reg_1145;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_1 = and_ln166_2_fu_534_p2))) then 
                phi_mul_reg_253 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    phi_urem_reg_265_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln291_reg_1030 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                phi_urem_reg_265 <= select_ln291_reg_1140;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_1 = and_ln166_2_fu_534_p2))) then 
                phi_urem_reg_265 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    sX_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state35_io) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                if ((icmp_ln187_fu_854_p2 = ap_const_lv1_1)) then 
                    sX <= ap_const_lv32_0;
                elsif ((icmp_ln187_fu_854_p2 = ap_const_lv1_0)) then 
                    sX <= select_ln202_fu_875_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln291_fu_540_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln291_1_reg_1039 <= add_ln291_1_fu_552_p2;
                tmp_18_reg_1050 <= ap_phi_mux_phi_mul_phi_fu_257_p4(13 downto 11);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln291_reg_1030 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln293_reg_1145 <= add_ln293_fu_812_p2;
                select_ln291_reg_1140 <= select_ln291_fu_805_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln291_reg_1030 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                add_ln703_1_reg_1120 <= add_ln703_1_fu_776_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln291_reg_1030 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                add_ln703_2_reg_1125 <= add_ln703_2_fu_782_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln291_reg_1030 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                add_ln703_3_reg_1130 <= add_ln703_3_fu_788_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln291_reg_1030 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then
                add_ln703_4_reg_1135 <= add_ln703_4_fu_794_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln291_reg_1030 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then
                add_ln703_5_reg_1150 <= add_ln703_5_fu_818_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln291_reg_1030 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln703_6_reg_1155 <= add_ln703_6_fu_824_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln291_reg_1030 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                add_ln703_reg_1115 <= add_ln703_fu_770_p2;
                tmpt_V_reg_1110 <= tmpt_V_fu_761_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                and_ln166_2_reg_1026 <= and_ln166_2_fu_534_p2;
                icmp_ln166_1_reg_1009 <= icmp_ln166_1_fu_476_p2;
                icmp_ln166_reg_999 <= icmp_ln166_fu_466_p2;
                pX_load_reg_1020 <= pX;
                pY_load_reg_1014 <= pY;
                sX_load_reg_994 <= sX;
                sY_load_reg_1004 <= sY;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                i_in_reg_1034 <= i_in_fu_546_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((regslice_both_res_V_V_U_apdone_blk = ap_const_logic_1) or ((icmp_ln157_fu_437_p2 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_reg_944 <= i_fu_443_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln291_reg_1030 <= icmp_ln291_fu_540_p2;
                icmp_ln291_reg_1030_pp0_iter1_reg <= icmp_ln291_reg_1030;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln291_reg_1030 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                lshr_ln293_reg_1065 <= lshr_ln293_fu_667_p2;
                    sub_ln293_2_reg_1060(7 downto 1) <= sub_ln293_2_fu_657_p2(7 downto 1);
                tmp_11_reg_1095 <= weights_V_q0(95 downto 80);
                tmp_13_reg_1100 <= weights_V_q0(111 downto 96);
                tmp_15_reg_1105 <= weights_V_q0(127 downto 112);
                tmp_3_reg_1075 <= weights_V_q0(31 downto 16);
                tmp_5_reg_1080 <= weights_V_q0(47 downto 32);
                tmp_7_reg_1085 <= weights_V_q0(63 downto 48);
                tmp_9_reg_1090 <= weights_V_q0(79 downto 64);
                trunc_ln299_reg_1070 <= trunc_ln299_fu_673_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln291_reg_1030 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_logic_1 = ap_CS_fsm_state28) and (res_V_V_TREADY_int = ap_const_logic_1)))) then
                reg_402 <= grp_fu_331_p1(31 downto 16);
                reg_407 <= grp_fu_342_p1(47 downto 32);
                reg_412 <= grp_fu_352_p1(63 downto 48);
                reg_417 <= grp_fu_362_p1(79 downto 64);
                reg_422 <= grp_fu_372_p1(95 downto 80);
                reg_427 <= grp_fu_382_p1(111 downto 96);
                reg_432 <= grp_fu_392_p1(127 downto 112);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state35_io) and (ap_const_logic_1 = ap_CS_fsm_state35) and (icmp_ln187_fu_854_p2 = ap_const_lv1_1))) then
                sY <= ap_phi_mux_storemerge_i_phi_fu_279_p4;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                tmp_V_10_reg_964 <= data_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                tmp_V_11_reg_969 <= data_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                tmp_V_12_reg_974 <= data_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                tmp_V_13_reg_979 <= data_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                tmp_V_14_reg_984 <= data_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_V_8_reg_954 <= data_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                tmp_V_9_reg_959 <= data_V_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((regslice_both_res_V_V_U_apdone_blk = ap_const_logic_1) or ((icmp_ln157_fu_437_p2 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0)))) and (icmp_ln157_fu_437_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_V_reg_949 <= data_V_V_dout;
            end if;
        end if;
    end process;
    sub_ln293_2_reg_1060(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, data_V_V_empty_n, ap_CS_fsm_state2, icmp_ln157_fu_437_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_enable_reg_pp0_iter0, regslice_both_res_V_V_U_apdone_blk, ap_CS_fsm_state16, and_ln166_2_fu_534_p2, icmp_ln291_fu_540_p2, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage1_subdone, ap_block_state35_io, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, res_V_V_TREADY_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((regslice_both_res_V_V_U_apdone_blk = ap_const_logic_1) or ((icmp_ln157_fu_437_p2 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0)))) and (icmp_ln157_fu_437_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((regslice_both_res_V_V_U_apdone_blk = ap_const_logic_1) or ((icmp_ln157_fu_437_p2 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0)))) and (icmp_ln157_fu_437_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                if (((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_1 = and_ln166_2_fu_534_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln291_fu_540_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln291_fu_540_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_state27 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state27) and (res_V_V_TREADY_int = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state28 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state28) and (res_V_V_TREADY_int = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state29 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state29) and (res_V_V_TREADY_int = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state30 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state30) and (res_V_V_TREADY_int = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state31 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state31) and (res_V_V_TREADY_int = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state32 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state32) and (res_V_V_TREADY_int = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state33 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state33) and (res_V_V_TREADY_int = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state34 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state34) and (res_V_V_TREADY_int = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state35 => 
                if (((ap_const_boolean_0 = ap_block_state35_io) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln195_fu_905_p2 <= std_logic_vector(unsigned(pY_load_reg_1014) + unsigned(ap_const_lv32_1));
    add_ln197_fu_916_p2 <= std_logic_vector(unsigned(sY_load_reg_1004) + unsigned(ap_const_lv32_1));
    add_ln200_fu_859_p2 <= std_logic_vector(unsigned(pX_load_reg_1020) + unsigned(ap_const_lv32_1));
    add_ln202_fu_870_p2 <= std_logic_vector(unsigned(sX_load_reg_994) + unsigned(ap_const_lv32_1));
    add_ln291_1_fu_552_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) + unsigned(ap_phi_mux_phi_urem_phi_fu_269_p4));
    add_ln293_fu_812_p2 <= std_logic_vector(unsigned(ap_const_lv15_E4) + unsigned(phi_mul_reg_253));
    add_ln703_1_fu_776_p2 <= std_logic_vector(unsigned(grp_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_325_ap_return) + unsigned(reg_402));
    add_ln703_2_fu_782_p2 <= std_logic_vector(unsigned(grp_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_325_ap_return) + unsigned(reg_407));
    add_ln703_3_fu_788_p2 <= std_logic_vector(unsigned(grp_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_325_ap_return) + unsigned(reg_412));
    add_ln703_4_fu_794_p2 <= std_logic_vector(unsigned(grp_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_325_ap_return) + unsigned(reg_417));
    add_ln703_5_fu_818_p2 <= std_logic_vector(unsigned(grp_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_325_ap_return) + unsigned(reg_422));
    add_ln703_6_fu_824_p2 <= std_logic_vector(unsigned(grp_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_325_ap_return) + unsigned(reg_427));
    add_ln703_7_fu_830_p2 <= std_logic_vector(unsigned(grp_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_325_ap_return) + unsigned(reg_432));
    add_ln703_fu_770_p2 <= std_logic_vector(unsigned(grp_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_325_ap_return) + unsigned(trunc_ln1265_fu_766_p1));
    and_ln166_1_fu_528_p2 <= (icmp_ln166_3_fu_516_p2 and icmp_ln166_2_fu_496_p2);
    and_ln166_2_fu_534_p2 <= (and_ln166_fu_522_p2 and and_ln166_1_fu_528_p2);
    and_ln166_fu_522_p2 <= (icmp_ln166_fu_466_p2 and icmp_ln166_1_fu_476_p2);
    and_ln293_fu_756_p2 <= (lshr_ln293_reg_1065 and lshr_ln293_1_fu_750_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(16);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(17);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(18);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(19);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(20);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(21);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(22);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(23);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state27 <= ap_CS_fsm(24);
    ap_CS_fsm_state28 <= ap_CS_fsm(25);
    ap_CS_fsm_state29 <= ap_CS_fsm(26);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(27);
    ap_CS_fsm_state31 <= ap_CS_fsm(28);
    ap_CS_fsm_state32 <= ap_CS_fsm(29);
    ap_CS_fsm_state33 <= ap_CS_fsm(30);
    ap_CS_fsm_state34 <= ap_CS_fsm(31);
    ap_CS_fsm_state35 <= ap_CS_fsm(32);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_NS_fsm_state10 <= ap_NS_fsm(9);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;

        ap_block_state17_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_assign_proc : process(data_V_V_empty_n, icmp_ln157_fu_437_p2, regslice_both_res_V_V_U_apdone_blk)
    begin
                ap_block_state2 <= ((regslice_both_res_V_V_U_apdone_blk = ap_const_logic_1) or ((icmp_ln157_fu_437_p2 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0)));
    end process;

        ap_block_state20_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state35_io_assign_proc : process(and_ln166_2_reg_1026, res_V_V_TREADY_int)
    begin
                ap_block_state35_io <= ((res_V_V_TREADY_int = ap_const_logic_0) and (ap_const_lv1_1 = and_ln166_2_reg_1026));
    end process;


    ap_condition_621_assign_proc : process(ap_CS_fsm_state35, ap_block_state35_io, icmp_ln187_fu_854_p2)
    begin
                ap_condition_621 <= ((ap_const_boolean_0 = ap_block_state35_io) and (ap_const_logic_1 = ap_CS_fsm_state35) and (icmp_ln187_fu_854_p2 = ap_const_lv1_1));
    end process;


    ap_condition_pp0_exit_iter0_state17_assign_proc : process(icmp_ln291_fu_540_p2)
    begin
        if ((icmp_ln291_fu_540_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state17 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state17 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, data_V_V_empty_n, ap_CS_fsm_state2, icmp_ln157_fu_437_p2, regslice_both_res_V_V_U_apdone_blk)
    begin
        if ((not(((regslice_both_res_V_V_U_apdone_blk = ap_const_logic_1) or ((icmp_ln157_fu_437_p2 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0)))) and (icmp_ln157_fu_437_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_in_0_i_i_phi_fu_246_p4_assign_proc : process(i_in_0_i_i_reg_242, icmp_ln291_reg_1030, ap_CS_fsm_pp0_stage0, i_in_reg_1034, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln291_reg_1030 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_i_in_0_i_i_phi_fu_246_p4 <= i_in_reg_1034;
        else 
            ap_phi_mux_i_in_0_i_i_phi_fu_246_p4 <= i_in_0_i_i_reg_242;
        end if; 
    end process;

    ap_phi_mux_layer_out_i_1_phi_fu_234_p4 <= layer_out_i_1_reg_230;

    ap_phi_mux_phi_mul_phi_fu_257_p4_assign_proc : process(phi_mul_reg_253, icmp_ln291_reg_1030, ap_CS_fsm_pp0_stage0, add_ln293_reg_1145, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln291_reg_1030 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_phi_mul_phi_fu_257_p4 <= add_ln293_reg_1145;
        else 
            ap_phi_mux_phi_mul_phi_fu_257_p4 <= phi_mul_reg_253;
        end if; 
    end process;


    ap_phi_mux_phi_urem_phi_fu_269_p4_assign_proc : process(phi_urem_reg_265, icmp_ln291_reg_1030, ap_CS_fsm_pp0_stage0, select_ln291_reg_1140, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln291_reg_1030 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_phi_urem_phi_fu_269_p4 <= select_ln291_reg_1140;
        else 
            ap_phi_mux_phi_urem_phi_fu_269_p4 <= phi_urem_reg_265;
        end if; 
    end process;


    ap_phi_mux_storemerge_i_phi_fu_279_p4_assign_proc : process(ap_CS_fsm_state35, select_ln197_fu_921_p3, icmp_ln187_fu_854_p2, icmp_ln191_fu_900_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) and (icmp_ln187_fu_854_p2 = ap_const_lv1_1))) then
            if ((icmp_ln191_fu_900_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_storemerge_i_phi_fu_279_p4 <= ap_const_lv32_0;
            elsif ((icmp_ln191_fu_900_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_storemerge_i_phi_fu_279_p4 <= select_ln197_fu_921_p3;
            else 
                ap_phi_mux_storemerge_i_phi_fu_279_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_storemerge_i_phi_fu_279_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_ready_assign_proc : process(data_V_V_empty_n, ap_CS_fsm_state2, icmp_ln157_fu_437_p2, regslice_both_res_V_V_U_apdone_blk)
    begin
        if ((not(((regslice_both_res_V_V_U_apdone_blk = ap_const_logic_1) or ((icmp_ln157_fu_437_p2 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0)))) and (icmp_ln157_fu_437_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    data_V_V_blk_n_assign_proc : process(data_V_V_empty_n, ap_CS_fsm_state2, icmp_ln157_fu_437_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln157_fu_437_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            data_V_V_blk_n <= data_V_V_empty_n;
        else 
            data_V_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_V_read_assign_proc : process(data_V_V_empty_n, ap_CS_fsm_state2, icmp_ln157_fu_437_p2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, regslice_both_res_V_V_U_apdone_blk)
    begin
        if (((not(((regslice_both_res_V_V_U_apdone_blk = ap_const_logic_1) or ((icmp_ln157_fu_437_p2 = ap_const_lv1_0) and (data_V_V_empty_n = ap_const_logic_0)))) and (icmp_ln157_fu_437_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((data_V_V_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            data_V_V_read <= ap_const_logic_1;
        else 
            data_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    empty_19_fu_585_p2 <= (tmp_19_fu_578_p3 or ap_const_lv7_F);
    grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_ap_start <= grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_ap_start_reg;
    grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_data_V_read <= (((((((tmp_V_14_reg_984 & tmp_V_13_reg_979) & tmp_V_12_reg_974) & tmp_V_11_reg_969) & tmp_V_10_reg_964) & tmp_V_9_reg_959) & tmp_V_8_reg_954) & tmp_V_reg_949);

    grp_fu_331_p1_assign_proc : process(ap_CS_fsm_state28, layer_out_i_1_reg_230, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_phi_mux_layer_out_i_1_phi_fu_234_p4, ap_block_pp0_stage2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_331_p1 <= layer_out_i_1_reg_230;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_331_p1 <= ap_phi_mux_layer_out_i_1_phi_fu_234_p4;
        else 
            grp_fu_331_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_342_p1_assign_proc : process(ap_CS_fsm_state28, layer_out_i_1_reg_230, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_phi_mux_layer_out_i_1_phi_fu_234_p4, ap_block_pp0_stage2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_342_p1 <= layer_out_i_1_reg_230;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_342_p1 <= ap_phi_mux_layer_out_i_1_phi_fu_234_p4;
        else 
            grp_fu_342_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_352_p1_assign_proc : process(ap_CS_fsm_state28, layer_out_i_1_reg_230, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_phi_mux_layer_out_i_1_phi_fu_234_p4, ap_block_pp0_stage2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_352_p1 <= layer_out_i_1_reg_230;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_352_p1 <= ap_phi_mux_layer_out_i_1_phi_fu_234_p4;
        else 
            grp_fu_352_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_362_p1_assign_proc : process(ap_CS_fsm_state28, layer_out_i_1_reg_230, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_phi_mux_layer_out_i_1_phi_fu_234_p4, ap_block_pp0_stage2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_362_p1 <= layer_out_i_1_reg_230;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_362_p1 <= ap_phi_mux_layer_out_i_1_phi_fu_234_p4;
        else 
            grp_fu_362_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_372_p1_assign_proc : process(ap_CS_fsm_state28, layer_out_i_1_reg_230, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_phi_mux_layer_out_i_1_phi_fu_234_p4, ap_block_pp0_stage2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_372_p1 <= layer_out_i_1_reg_230;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_372_p1 <= ap_phi_mux_layer_out_i_1_phi_fu_234_p4;
        else 
            grp_fu_372_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_382_p1_assign_proc : process(ap_CS_fsm_state28, layer_out_i_1_reg_230, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_phi_mux_layer_out_i_1_phi_fu_234_p4, ap_block_pp0_stage2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_382_p1 <= layer_out_i_1_reg_230;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_382_p1 <= ap_phi_mux_layer_out_i_1_phi_fu_234_p4;
        else 
            grp_fu_382_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_392_p1_assign_proc : process(ap_CS_fsm_state28, layer_out_i_1_reg_230, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_phi_mux_layer_out_i_1_phi_fu_234_p4, ap_block_pp0_stage2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_fu_392_p1 <= layer_out_i_1_reg_230;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_392_p1 <= ap_phi_mux_layer_out_i_1_phi_fu_234_p4;
        else 
            grp_fu_392_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_325_a_V_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, icmp_ln291_reg_1030, ap_CS_fsm_pp0_stage0, icmp_ln291_reg_1030_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, tmpt_V_fu_761_p1, tmpt_V_reg_1110, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6, ap_block_pp0_stage7, ap_block_pp0_stage1)
    begin
        if ((((icmp_ln291_reg_1030_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((icmp_ln291_reg_1030 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((icmp_ln291_reg_1030 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((icmp_ln291_reg_1030 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((icmp_ln291_reg_1030 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((icmp_ln291_reg_1030 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((icmp_ln291_reg_1030 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            grp_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_325_a_V <= tmpt_V_reg_1110;
        elsif (((icmp_ln291_reg_1030 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_325_a_V <= tmpt_V_fu_761_p1;
        else 
            grp_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_325_a_V <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_325_w_V_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, icmp_ln291_reg_1030, ap_CS_fsm_pp0_stage0, icmp_ln291_reg_1030_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, trunc_ln299_reg_1070, tmp_3_reg_1075, tmp_5_reg_1080, tmp_7_reg_1085, tmp_9_reg_1090, tmp_11_reg_1095, tmp_13_reg_1100, tmp_15_reg_1105, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6, ap_block_pp0_stage7, ap_block_pp0_stage1)
    begin
        if (((icmp_ln291_reg_1030_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_325_w_V <= tmp_15_reg_1105;
        elsif (((icmp_ln291_reg_1030 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_325_w_V <= tmp_13_reg_1100;
        elsif (((icmp_ln291_reg_1030 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_325_w_V <= tmp_11_reg_1095;
        elsif (((icmp_ln291_reg_1030 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_325_w_V <= tmp_9_reg_1090;
        elsif (((icmp_ln291_reg_1030 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_325_w_V <= tmp_7_reg_1085;
        elsif (((icmp_ln291_reg_1030 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_325_w_V <= tmp_5_reg_1080;
        elsif (((icmp_ln291_reg_1030 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_325_w_V <= tmp_3_reg_1075;
        elsif (((icmp_ln291_reg_1030 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_325_w_V <= trunc_ln299_reg_1070;
        else 
            grp_product_dense_ap_fixed_ap_fixed_ap_fixed_s_fu_325_w_V <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_fu_443_p2 <= std_logic_vector(unsigned(i_0_i_reg_219) + unsigned(ap_const_lv5_1));
    i_in_fu_546_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_in_0_i_i_phi_fu_246_p4) + unsigned(ap_const_lv7_1));
    icmp_ln157_fu_437_p2 <= "1" when (i_0_i_reg_219 = ap_const_lv5_19) else "0";
    icmp_ln166_1_fu_476_p2 <= "1" when (sY = ap_const_lv32_2) else "0";
    icmp_ln166_2_fu_496_p2 <= "1" when (signed(tmp_1_fu_486_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln166_3_fu_516_p2 <= "1" when (signed(tmp_2_fu_506_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln166_fu_466_p2 <= "1" when (sX = ap_const_lv32_2) else "0";
    icmp_ln187_fu_854_p2 <= "1" when (pX_load_reg_1020 = ap_const_lv32_4) else "0";
    icmp_ln191_fu_900_p2 <= "1" when (pY_load_reg_1014 = ap_const_lv32_4) else "0";
    icmp_ln291_1_fu_800_p2 <= "1" when (unsigned(add_ln291_1_reg_1039) < unsigned(ap_const_lv7_9)) else "0";
    icmp_ln291_fu_540_p2 <= "1" when (ap_phi_mux_i_in_0_i_i_phi_fu_246_p4 = ap_const_lv7_48) else "0";
    icmp_ln293_fu_591_p2 <= "1" when (unsigned(tmp_19_fu_578_p3) > unsigned(empty_19_fu_585_p2)) else "0";

    layer_in_V_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_state10, ap_CS_fsm_state16, ap_CS_fsm_pp0_stage0, grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_output_V_address0, ap_block_pp0_stage0, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, zext_ln293_fu_558_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            layer_in_V_address0 <= zext_ln293_fu_558_p1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            layer_in_V_address0 <= grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_output_V_address0;
        else 
            layer_in_V_address0 <= "XXXX";
        end if; 
    end process;


    layer_in_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_state10, ap_CS_fsm_state16, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_output_V_ce0, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            layer_in_V_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            layer_in_V_ce0 <= grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_output_V_ce0;
        else 
            layer_in_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_in_V_ce1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state16, grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_output_V_ce1, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            layer_in_V_ce1 <= grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_output_V_ce1;
        else 
            layer_in_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    layer_in_V_we0_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state16, grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_output_V_we0, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            layer_in_V_we0 <= grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_output_V_we0;
        else 
            layer_in_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    layer_in_V_we1_assign_proc : process(ap_CS_fsm_state10, ap_CS_fsm_state16, grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_output_V_we1, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            layer_in_V_we1 <= grp_cnnshift_arr_ap_fixed_ap_fixed_16_14_5_3_0_config2_s_fu_286_output_V_we1;
        else 
            layer_in_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln293_1_fu_750_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv128_lc_2),to_integer(unsigned('0' & zext_ln293_4_fu_747_p1(31-1 downto 0)))));
    lshr_ln293_fu_667_p2 <= std_logic_vector(shift_right(unsigned(select_ln293_1_fu_641_p3),to_integer(unsigned('0' & zext_ln293_3_fu_663_p1(31-1 downto 0)))));

    res_V_V_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, and_ln166_2_reg_1026, res_V_V_TREADY_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or ((ap_const_logic_1 = ap_CS_fsm_state35) and (ap_const_lv1_1 = and_ln166_2_reg_1026)))) then 
            res_V_V_TDATA_blk_n <= res_V_V_TREADY_int;
        else 
            res_V_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    res_V_V_TDATA_int_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, reg_407, reg_412, reg_417, reg_422, reg_427, reg_432, tmp_V_15_fu_849_p1, grp_fu_331_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            res_V_V_TDATA_int <= reg_432;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            res_V_V_TDATA_int <= reg_427;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            res_V_V_TDATA_int <= reg_422;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            res_V_V_TDATA_int <= reg_417;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            res_V_V_TDATA_int <= reg_412;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            res_V_V_TDATA_int <= reg_407;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            res_V_V_TDATA_int <= grp_fu_331_p1(31 downto 16);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            res_V_V_TDATA_int <= tmp_V_15_fu_849_p1;
        else 
            res_V_V_TDATA_int <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    res_V_V_TVALID <= regslice_both_res_V_V_U_vld_out;

    res_V_V_TVALID_int_assign_proc : process(ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, res_V_V_TREADY_int)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state34) and (res_V_V_TREADY_int = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state33) and (res_V_V_TREADY_int = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state32) and (res_V_V_TREADY_int = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (res_V_V_TREADY_int = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state30) and (res_V_V_TREADY_int = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state29) and (res_V_V_TREADY_int = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state28) and (res_V_V_TREADY_int = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state27) and (res_V_V_TREADY_int = ap_const_logic_1)))) then 
            res_V_V_TVALID_int <= ap_const_logic_1;
        else 
            res_V_V_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    select_ln197_fu_921_p3 <= 
        ap_const_lv32_2 when (icmp_ln166_1_reg_1009(0) = '1') else 
        add_ln197_fu_916_p2;
    select_ln202_fu_875_p3 <= 
        ap_const_lv32_2 when (icmp_ln166_reg_999(0) = '1') else 
        add_ln202_fu_870_p2;
    select_ln291_fu_805_p3 <= 
        add_ln291_1_reg_1039 when (icmp_ln291_1_fu_800_p2(0) = '1') else 
        ap_const_lv7_0;
    select_ln293_1_fu_641_p3 <= 
        tmp_20_fu_605_p4 when (icmp_ln293_fu_591_p2(0) = '1') else 
        layer_in_V_q0;
    select_ln293_2_fu_649_p3 <= 
        xor_ln293_fu_621_p2 when (icmp_ln293_fu_591_p2(0) = '1') else 
        zext_ln293_1_fu_597_p1;
    select_ln293_fu_633_p3 <= 
        sub_ln293_fu_615_p2 when (icmp_ln293_fu_591_p2(0) = '1') else 
        sub_ln293_1_fu_627_p2;
    sub_ln293_1_fu_627_p2 <= std_logic_vector(unsigned(zext_ln293_2_fu_601_p1) - unsigned(zext_ln293_1_fu_597_p1));
    sub_ln293_2_fu_657_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(select_ln293_fu_633_p3));
    sub_ln293_fu_615_p2 <= std_logic_vector(unsigned(zext_ln293_1_fu_597_p1) - unsigned(zext_ln293_2_fu_601_p1));
    tmp_17_fu_836_p9 <= (((((((add_ln703_7_fu_830_p2 & add_ln703_6_reg_1155) & add_ln703_5_reg_1150) & add_ln703_4_reg_1135) & add_ln703_3_reg_1130) & add_ln703_2_reg_1125) & add_ln703_1_reg_1120) & add_ln703_reg_1115);
    tmp_19_fu_578_p3 <= (tmp_18_reg_1050 & ap_const_lv4_0);
    tmp_1_fu_486_p4 <= pY(31 downto 1);
    
    tmp_20_fu_605_p4_proc : process(layer_in_V_q0)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_20_fu_605_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := layer_in_V_q0;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_20_fu_605_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_20_fu_605_p4_i) := layer_in_V_q0(128-1-tmp_20_fu_605_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_20_fu_605_p4 <= resvalue(128-1 downto 0);
    end process;

    tmp_2_fu_506_p4 <= pX(31 downto 1);
    tmp_V_15_fu_849_p1 <= layer_out_i_1_reg_230(16 - 1 downto 0);
    tmpt_V_fu_761_p1 <= and_ln293_fu_756_p2(16 - 1 downto 0);
    trunc_ln1265_fu_766_p1 <= layer_out_i_1_reg_230(16 - 1 downto 0);
    trunc_ln299_fu_673_p1 <= weights_V_q0(16 - 1 downto 0);
    weights_V_address0 <= zext_ln299_fu_573_p1(7 - 1 downto 0);

    weights_V_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            weights_V_ce0 <= ap_const_logic_1;
        else 
            weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln293_fu_621_p2 <= (zext_ln293_1_fu_597_p1 xor ap_const_lv8_7F);
    zext_ln293_1_fu_597_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_578_p3),8));
    zext_ln293_2_fu_601_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_19_fu_585_p2),8));
    zext_ln293_3_fu_663_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln293_2_fu_649_p3),128));
    zext_ln293_4_fu_747_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln293_2_reg_1060),128));
    zext_ln293_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_phi_urem_phi_fu_269_p4),64));
    zext_ln299_fu_573_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_in_0_i_i_phi_fu_246_p4),64));
end behav;
