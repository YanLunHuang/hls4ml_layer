// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _myproject_HH_
#define _myproject_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "Block_proc.h"
#include "normalize_me_ap_fixed_ap_fixed_32_16_5_3_0_config3_s.h"

namespace ap_rtl {

struct myproject : public sc_module {
    // Port declarations 16
    sc_in< sc_lv<32> > em_barrel_V_V_TDATA;
    sc_out< sc_lv<32> > layer55_out_V_V_TDATA;
    sc_out< sc_lv<16> > const_size_in_1;
    sc_out< sc_lv<16> > const_size_out_1;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_logic > const_size_in_1_ap_vld;
    sc_out< sc_logic > const_size_out_1_ap_vld;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > em_barrel_V_V_TVALID;
    sc_out< sc_logic > em_barrel_V_V_TREADY;
    sc_out< sc_logic > layer55_out_V_V_TVALID;
    sc_in< sc_logic > layer55_out_V_V_TREADY;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > ap_idle;


    // Module declarations
    myproject(sc_module_name name);
    SC_HAS_PROCESS(myproject);

    ~myproject();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    Block_proc* Block_proc_U0;
    normalize_me_ap_fixed_ap_fixed_32_16_5_3_0_config3_s* normalize_me_ap_fixed_ap_fixed_32_16_5_3_0_config3_U0;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > Block_proc_U0_ap_start;
    sc_signal< sc_logic > Block_proc_U0_ap_done;
    sc_signal< sc_logic > Block_proc_U0_ap_continue;
    sc_signal< sc_logic > Block_proc_U0_ap_idle;
    sc_signal< sc_logic > Block_proc_U0_ap_ready;
    sc_signal< sc_lv<16> > Block_proc_U0_const_size_in_1;
    sc_signal< sc_logic > Block_proc_U0_const_size_in_1_ap_vld;
    sc_signal< sc_lv<16> > Block_proc_U0_const_size_out_1;
    sc_signal< sc_logic > Block_proc_U0_const_size_out_1_ap_vld;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_logic > normalize_me_ap_fixed_ap_fixed_32_16_5_3_0_config3_U0_ap_start;
    sc_signal< sc_logic > normalize_me_ap_fixed_ap_fixed_32_16_5_3_0_config3_U0_ap_done;
    sc_signal< sc_logic > normalize_me_ap_fixed_ap_fixed_32_16_5_3_0_config3_U0_ap_continue;
    sc_signal< sc_logic > normalize_me_ap_fixed_ap_fixed_32_16_5_3_0_config3_U0_ap_idle;
    sc_signal< sc_logic > normalize_me_ap_fixed_ap_fixed_32_16_5_3_0_config3_U0_ap_ready;
    sc_signal< sc_logic > normalize_me_ap_fixed_ap_fixed_32_16_5_3_0_config3_U0_data_V_V_TREADY;
    sc_signal< sc_lv<32> > normalize_me_ap_fixed_ap_fixed_32_16_5_3_0_config3_U0_res_V_V_TDATA;
    sc_signal< sc_logic > normalize_me_ap_fixed_ap_fixed_32_16_5_3_0_config3_U0_res_V_V_TVALID;
    sc_signal< sc_logic > ap_sync_done;
    sc_signal< sc_logic > ap_sync_ready;
    sc_signal< sc_logic > ap_sync_reg_Block_proc_U0_ap_ready;
    sc_signal< sc_logic > ap_sync_Block_proc_U0_ap_ready;
    sc_signal< sc_lv<2> > Block_proc_U0_ap_ready_count;
    sc_signal< sc_logic > ap_sync_reg_normalize_me_ap_fixed_ap_fixed_32_16_5_3_0_config3_U0_ap_ready;
    sc_signal< sc_logic > ap_sync_normalize_me_ap_fixed_ap_fixed_32_16_5_3_0_config3_U0_ap_ready;
    sc_signal< sc_lv<2> > normalize_me_ap_fixed_ap_fixed_32_16_5_3_0_config3_U0_ap_ready_count;
    sc_signal< sc_logic > Block_proc_U0_start_full_n;
    sc_signal< sc_logic > Block_proc_U0_start_write;
    sc_signal< sc_logic > normalize_me_ap_fixed_ap_fixed_32_16_5_3_0_config3_U0_start_full_n;
    sc_signal< sc_logic > normalize_me_ap_fixed_ap_fixed_32_16_5_3_0_config3_U0_start_write;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_Block_proc_U0_ap_continue();
    void thread_Block_proc_U0_ap_start();
    void thread_Block_proc_U0_start_full_n();
    void thread_Block_proc_U0_start_write();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_ap_sync_Block_proc_U0_ap_ready();
    void thread_ap_sync_continue();
    void thread_ap_sync_done();
    void thread_ap_sync_normalize_me_ap_fixed_ap_fixed_32_16_5_3_0_config3_U0_ap_ready();
    void thread_ap_sync_ready();
    void thread_const_size_in_1();
    void thread_const_size_in_1_ap_vld();
    void thread_const_size_out_1();
    void thread_const_size_out_1_ap_vld();
    void thread_em_barrel_V_V_TREADY();
    void thread_layer55_out_V_V_TDATA();
    void thread_layer55_out_V_V_TVALID();
    void thread_normalize_me_ap_fixed_ap_fixed_32_16_5_3_0_config3_U0_ap_continue();
    void thread_normalize_me_ap_fixed_ap_fixed_32_16_5_3_0_config3_U0_ap_start();
    void thread_normalize_me_ap_fixed_ap_fixed_32_16_5_3_0_config3_U0_start_full_n();
    void thread_normalize_me_ap_fixed_ap_fixed_32_16_5_3_0_config3_U0_start_write();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
